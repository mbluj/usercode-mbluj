//
// File generated by /cvmfs/cms.cern.ch/slc6_amd64_gcc481/lcg/root/5.34.10-cms7//bin/rootcint at Tue Jul 15 14:34:00 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME TestdIMiniAnalyzerdIsrcdIMyRootDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "MyRootDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void ParticleObj_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ParticleObj(void *p = 0);
   static void *newArray_ParticleObj(Long_t size, void *p);
   static void delete_ParticleObj(void *p);
   static void deleteArray_ParticleObj(void *p);
   static void destruct_ParticleObj(void *p);
   static void streamer_ParticleObj(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ParticleObj*)
   {
      ::ParticleObj *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ParticleObj >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ParticleObj", ::ParticleObj::Class_Version(), "./Test/MiniAnalyzer/interface/ParticleObj.h", 8,
                  typeid(::ParticleObj), DefineBehavior(ptr, ptr),
                  &::ParticleObj::Dictionary, isa_proxy, 0,
                  sizeof(::ParticleObj) );
      instance.SetNew(&new_ParticleObj);
      instance.SetNewArray(&newArray_ParticleObj);
      instance.SetDelete(&delete_ParticleObj);
      instance.SetDeleteArray(&deleteArray_ParticleObj);
      instance.SetDestructor(&destruct_ParticleObj);
      instance.SetStreamerFunc(&streamer_ParticleObj);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ParticleObj*)
   {
      return GenerateInitInstanceLocal((::ParticleObj*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ParticleObj*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void DiTauObj_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_DiTauObj(void *p = 0);
   static void *newArray_DiTauObj(Long_t size, void *p);
   static void delete_DiTauObj(void *p);
   static void deleteArray_DiTauObj(void *p);
   static void destruct_DiTauObj(void *p);
   static void streamer_DiTauObj(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::DiTauObj*)
   {
      ::DiTauObj *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::DiTauObj >(0);
      static ::ROOT::TGenericClassInfo 
         instance("DiTauObj", ::DiTauObj::Class_Version(), "./Test/MiniAnalyzer/interface/DiTauObj.h", 8,
                  typeid(::DiTauObj), DefineBehavior(ptr, ptr),
                  &::DiTauObj::Dictionary, isa_proxy, 0,
                  sizeof(::DiTauObj) );
      instance.SetNew(&new_DiTauObj);
      instance.SetNewArray(&newArray_DiTauObj);
      instance.SetDelete(&delete_DiTauObj);
      instance.SetDeleteArray(&deleteArray_DiTauObj);
      instance.SetDestructor(&destruct_DiTauObj);
      instance.SetStreamerFunc(&streamer_DiTauObj);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::DiTauObj*)
   {
      return GenerateInitInstanceLocal((::DiTauObj*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DiTauObj*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MuonObj_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MuonObj(void *p = 0);
   static void *newArray_MuonObj(Long_t size, void *p);
   static void delete_MuonObj(void *p);
   static void deleteArray_MuonObj(void *p);
   static void destruct_MuonObj(void *p);
   static void streamer_MuonObj(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MuonObj*)
   {
      ::MuonObj *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MuonObj >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MuonObj", ::MuonObj::Class_Version(), "./Test/MiniAnalyzer/interface/MuonObj.h", 8,
                  typeid(::MuonObj), DefineBehavior(ptr, ptr),
                  &::MuonObj::Dictionary, isa_proxy, 0,
                  sizeof(::MuonObj) );
      instance.SetNew(&new_MuonObj);
      instance.SetNewArray(&newArray_MuonObj);
      instance.SetDelete(&delete_MuonObj);
      instance.SetDeleteArray(&deleteArray_MuonObj);
      instance.SetDestructor(&destruct_MuonObj);
      instance.SetStreamerFunc(&streamer_MuonObj);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MuonObj*)
   {
      return GenerateInitInstanceLocal((::MuonObj*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MuonObj*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TauObj_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TauObj(void *p = 0);
   static void *newArray_TauObj(Long_t size, void *p);
   static void delete_TauObj(void *p);
   static void deleteArray_TauObj(void *p);
   static void destruct_TauObj(void *p);
   static void streamer_TauObj(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TauObj*)
   {
      ::TauObj *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TauObj >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TauObj", ::TauObj::Class_Version(), "./Test/MiniAnalyzer/interface/TauObj.h", 8,
                  typeid(::TauObj), DefineBehavior(ptr, ptr),
                  &::TauObj::Dictionary, isa_proxy, 0,
                  sizeof(::TauObj) );
      instance.SetNew(&new_TauObj);
      instance.SetNewArray(&newArray_TauObj);
      instance.SetDelete(&delete_TauObj);
      instance.SetDeleteArray(&deleteArray_TauObj);
      instance.SetDestructor(&destruct_TauObj);
      instance.SetStreamerFunc(&streamer_TauObj);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TauObj*)
   {
      return GenerateInitInstanceLocal((::TauObj*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TauObj*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator_Dictionary();
   static void *new_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator(void *p = 0);
   static void *newArray_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator(Long_t size, void *p);
   static void delete_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator(void *p);
   static void deleteArray_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator(void *p);
   static void destruct_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::vector<ParticleObj,allocator<ParticleObj> >::iterator*)
   {
      ::vector<ParticleObj,allocator<ParticleObj> >::iterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::vector<ParticleObj,allocator<ParticleObj> >::iterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<ParticleObj,allocator<ParticleObj> >::iterator", "/cvmfs/cms.cern.ch/slc6_amd64_gcc481/lcg/root/5.34.10-cms7/cint/cint/lib/prec_stl/vector", 218,
                  typeid(::vector<ParticleObj,allocator<ParticleObj> >::iterator), DefineBehavior(ptr, ptr),
                  0, &vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator_Dictionary, isa_proxy, 0,
                  sizeof(::vector<ParticleObj,allocator<ParticleObj> >::iterator) );
      instance.SetNew(&new_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator);
      instance.SetNewArray(&newArray_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator);
      instance.SetDelete(&delete_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator);
      instance.SetDeleteArray(&deleteArray_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator);
      instance.SetDestructor(&destruct_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::vector<ParticleObj,allocator<ParticleObj> >::iterator*)
   {
      return GenerateInitInstanceLocal((::vector<ParticleObj,allocator<ParticleObj> >::iterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::vector<ParticleObj,allocator<ParticleObj> >::iterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::vector<ParticleObj,allocator<ParticleObj> >::iterator*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator_Dictionary();
   static void *new_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator(void *p = 0);
   static void *newArray_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator(Long_t size, void *p);
   static void delete_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator(void *p);
   static void deleteArray_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator(void *p);
   static void destruct_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::vector<MuonObj,allocator<MuonObj> >::iterator*)
   {
      ::vector<MuonObj,allocator<MuonObj> >::iterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::vector<MuonObj,allocator<MuonObj> >::iterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MuonObj,allocator<MuonObj> >::iterator", "/cvmfs/cms.cern.ch/slc6_amd64_gcc481/lcg/root/5.34.10-cms7/cint/cint/lib/prec_stl/vector", 218,
                  typeid(::vector<MuonObj,allocator<MuonObj> >::iterator), DefineBehavior(ptr, ptr),
                  0, &vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator_Dictionary, isa_proxy, 0,
                  sizeof(::vector<MuonObj,allocator<MuonObj> >::iterator) );
      instance.SetNew(&new_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator);
      instance.SetNewArray(&newArray_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator);
      instance.SetDelete(&delete_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator);
      instance.SetDeleteArray(&deleteArray_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator);
      instance.SetDestructor(&destruct_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::vector<MuonObj,allocator<MuonObj> >::iterator*)
   {
      return GenerateInitInstanceLocal((::vector<MuonObj,allocator<MuonObj> >::iterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::vector<MuonObj,allocator<MuonObj> >::iterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::vector<MuonObj,allocator<MuonObj> >::iterator*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator_Dictionary();
   static void *new_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator(void *p = 0);
   static void *newArray_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator(Long_t size, void *p);
   static void delete_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator(void *p);
   static void deleteArray_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator(void *p);
   static void destruct_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::vector<TauObj,allocator<TauObj> >::iterator*)
   {
      ::vector<TauObj,allocator<TauObj> >::iterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::vector<TauObj,allocator<TauObj> >::iterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TauObj,allocator<TauObj> >::iterator", "/cvmfs/cms.cern.ch/slc6_amd64_gcc481/lcg/root/5.34.10-cms7/cint/cint/lib/prec_stl/vector", 218,
                  typeid(::vector<TauObj,allocator<TauObj> >::iterator), DefineBehavior(ptr, ptr),
                  0, &vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator_Dictionary, isa_proxy, 0,
                  sizeof(::vector<TauObj,allocator<TauObj> >::iterator) );
      instance.SetNew(&new_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator);
      instance.SetNewArray(&newArray_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator);
      instance.SetDelete(&delete_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator);
      instance.SetDeleteArray(&deleteArray_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator);
      instance.SetDestructor(&destruct_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::vector<TauObj,allocator<TauObj> >::iterator*)
   {
      return GenerateInitInstanceLocal((::vector<TauObj,allocator<TauObj> >::iterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::vector<TauObj,allocator<TauObj> >::iterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::vector<TauObj,allocator<TauObj> >::iterator*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator_Dictionary();
   static void *new_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator(void *p = 0);
   static void *newArray_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator(Long_t size, void *p);
   static void delete_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator(void *p);
   static void deleteArray_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator(void *p);
   static void destruct_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::vector<DiTauObj,allocator<DiTauObj> >::iterator*)
   {
      ::vector<DiTauObj,allocator<DiTauObj> >::iterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::vector<DiTauObj,allocator<DiTauObj> >::iterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<DiTauObj,allocator<DiTauObj> >::iterator", "/cvmfs/cms.cern.ch/slc6_amd64_gcc481/lcg/root/5.34.10-cms7/cint/cint/lib/prec_stl/vector", 218,
                  typeid(::vector<DiTauObj,allocator<DiTauObj> >::iterator), DefineBehavior(ptr, ptr),
                  0, &vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator_Dictionary, isa_proxy, 0,
                  sizeof(::vector<DiTauObj,allocator<DiTauObj> >::iterator) );
      instance.SetNew(&new_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator);
      instance.SetNewArray(&newArray_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator);
      instance.SetDelete(&delete_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator);
      instance.SetDeleteArray(&deleteArray_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator);
      instance.SetDestructor(&destruct_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::vector<DiTauObj,allocator<DiTauObj> >::iterator*)
   {
      return GenerateInitInstanceLocal((::vector<DiTauObj,allocator<DiTauObj> >::iterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::vector<DiTauObj,allocator<DiTauObj> >::iterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::vector<DiTauObj,allocator<DiTauObj> >::iterator*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
TClass *ParticleObj::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *ParticleObj::Class_Name()
{
   return "ParticleObj";
}

//______________________________________________________________________________
const char *ParticleObj::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ParticleObj*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ParticleObj::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ParticleObj*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ParticleObj::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ParticleObj*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ParticleObj::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ParticleObj*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *DiTauObj::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *DiTauObj::Class_Name()
{
   return "DiTauObj";
}

//______________________________________________________________________________
const char *DiTauObj::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::DiTauObj*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int DiTauObj::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::DiTauObj*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void DiTauObj::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::DiTauObj*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *DiTauObj::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::DiTauObj*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MuonObj::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MuonObj::Class_Name()
{
   return "MuonObj";
}

//______________________________________________________________________________
const char *MuonObj::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MuonObj*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MuonObj::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MuonObj*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MuonObj::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MuonObj*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MuonObj::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MuonObj*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TauObj::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TauObj::Class_Name()
{
   return "TauObj";
}

//______________________________________________________________________________
const char *TauObj::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TauObj*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TauObj::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TauObj*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TauObj::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TauObj*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TauObj::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TauObj*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void ParticleObj::Streamer(TBuffer &R__b)
{
   // Stream an object of class ParticleObj.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> thePt;
      R__b >> theEta;
      R__b >> thePhi;
      R__b >> theMass;
      R__b >> theCharge;
      R__b.CheckByteCount(R__s, R__c, ParticleObj::IsA());
   } else {
      R__c = R__b.WriteVersion(ParticleObj::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << thePt;
      R__b << theEta;
      R__b << thePhi;
      R__b << theMass;
      R__b << theCharge;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void ParticleObj::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ParticleObj.
      TClass *R__cl = ::ParticleObj::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thePt", &thePt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theEta", &theEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thePhi", &thePhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theMass", &theMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theCharge", &theCharge);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ParticleObj(void *p) {
      return  p ? new(p) ::ParticleObj : new ::ParticleObj;
   }
   static void *newArray_ParticleObj(Long_t nElements, void *p) {
      return p ? new(p) ::ParticleObj[nElements] : new ::ParticleObj[nElements];
   }
   // Wrapper around operator delete
   static void delete_ParticleObj(void *p) {
      delete ((::ParticleObj*)p);
   }
   static void deleteArray_ParticleObj(void *p) {
      delete [] ((::ParticleObj*)p);
   }
   static void destruct_ParticleObj(void *p) {
      typedef ::ParticleObj current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_ParticleObj(TBuffer &buf, void *obj) {
      ((::ParticleObj*)obj)->::ParticleObj::Streamer(buf);
   }
} // end of namespace ROOT for class ::ParticleObj

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<ParticleObj,allocator<ParticleObj> >::iterator : new ::vector<ParticleObj,allocator<ParticleObj> >::iterator;
   }
   static void *newArray_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<ParticleObj,allocator<ParticleObj> >::iterator[nElements] : new ::vector<ParticleObj,allocator<ParticleObj> >::iterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator(void *p) {
      delete ((::vector<ParticleObj,allocator<ParticleObj> >::iterator*)p);
   }
   static void deleteArray_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator(void *p) {
      delete [] ((::vector<ParticleObj,allocator<ParticleObj> >::iterator*)p);
   }
   static void destruct_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator(void *p) {
      typedef ::vector<ParticleObj,allocator<ParticleObj> >::iterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::vector<ParticleObj,allocator<ParticleObj> >::iterator

//______________________________________________________________________________
void MuonObj::Streamer(TBuffer &R__b)
{
   // Stream an object of class MuonObj.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      ParticleObj::Streamer(R__b);
      R__b >> nRPCHits;
      R__b >> nDTHits;
      R__b >> nCSCHits;
      R__b >> nTrackerHits;
      R__b >> nMatchedStations;
      R__b >> isUnique;
      R__b >> nAllMuons;
      R__b >> chHadIso;
      R__b >> chIso;
      R__b >> nHadIso;
      R__b >> phIso;
      R__b >> puIso;
      R__b >> dz;
      R__b >> dzErr;
      R__b >> dxy;
      R__b >> dxyErr;
      R__b >> genPdgId;
      R__b >> genPt;
      R__b >> theMuonBits;
      R__b.CheckByteCount(R__s, R__c, MuonObj::IsA());
   } else {
      R__c = R__b.WriteVersion(MuonObj::IsA(), kTRUE);
      ParticleObj::Streamer(R__b);
      R__b << nRPCHits;
      R__b << nDTHits;
      R__b << nCSCHits;
      R__b << nTrackerHits;
      R__b << nMatchedStations;
      R__b << isUnique;
      R__b << nAllMuons;
      R__b << chHadIso;
      R__b << chIso;
      R__b << nHadIso;
      R__b << phIso;
      R__b << puIso;
      R__b << dz;
      R__b << dzErr;
      R__b << dxy;
      R__b << dxyErr;
      R__b << genPdgId;
      R__b << genPt;
      R__b << theMuonBits;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MuonObj::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MuonObj.
      TClass *R__cl = ::MuonObj::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nRPCHits", &nRPCHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDTHits", &nDTHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nCSCHits", &nCSCHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrackerHits", &nTrackerHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMatchedStations", &nMatchedStations);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isUnique", &isUnique);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nAllMuons", &nAllMuons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chHadIso", &chHadIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chIso", &chIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nHadIso", &nHadIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phIso", &phIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "puIso", &puIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dz", &dz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dzErr", &dzErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxy", &dxy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxyErr", &dxyErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genPdgId", &genPdgId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genPt", &genPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theMuonBits", &theMuonBits);
      ParticleObj::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MuonObj(void *p) {
      return  p ? new(p) ::MuonObj : new ::MuonObj;
   }
   static void *newArray_MuonObj(Long_t nElements, void *p) {
      return p ? new(p) ::MuonObj[nElements] : new ::MuonObj[nElements];
   }
   // Wrapper around operator delete
   static void delete_MuonObj(void *p) {
      delete ((::MuonObj*)p);
   }
   static void deleteArray_MuonObj(void *p) {
      delete [] ((::MuonObj*)p);
   }
   static void destruct_MuonObj(void *p) {
      typedef ::MuonObj current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_MuonObj(TBuffer &buf, void *obj) {
      ((::MuonObj*)obj)->::MuonObj::Streamer(buf);
   }
} // end of namespace ROOT for class ::MuonObj

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<MuonObj,allocator<MuonObj> >::iterator : new ::vector<MuonObj,allocator<MuonObj> >::iterator;
   }
   static void *newArray_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<MuonObj,allocator<MuonObj> >::iterator[nElements] : new ::vector<MuonObj,allocator<MuonObj> >::iterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator(void *p) {
      delete ((::vector<MuonObj,allocator<MuonObj> >::iterator*)p);
   }
   static void deleteArray_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator(void *p) {
      delete [] ((::vector<MuonObj,allocator<MuonObj> >::iterator*)p);
   }
   static void destruct_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator(void *p) {
      typedef ::vector<MuonObj,allocator<MuonObj> >::iterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::vector<MuonObj,allocator<MuonObj> >::iterator

//______________________________________________________________________________
void TauObj::Streamer(TBuffer &R__b)
{
   // Stream an object of class TauObj.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      ParticleObj::Streamer(R__b);
      R__b >> nAllTaus;
      R__b >> chIso;
      R__b >> phIso;
      R__b >> puIso;
      R__b >> iso;
      R__b >> dzPV;
      R__b >> dzTau;
      R__b >> dzTauErr;
      R__b >> dxyTau;
      R__b >> dxyTauErr;
      R__b >> dxyTauSig;
      R__b >> dzTrk;
      R__b >> dzTrkErr;
      R__b >> dxyTrk;
      R__b >> dxyTrkErr;
      R__b >> hasKft;
      R__b >> hasSecVtx;
      R__b >> flightLength;
      R__b >> flightLengthError;
      R__b >> flightLengthSig;
      R__b >> genPdgId;
      R__b >> nGenPart;
      R__b >> leadGenPt;
      R__b >> genTauJetPt;
      R__b >> decMode;
      R__b >> genDecMode;
      R__b >> visMass;
      R__b >> genVisMass;
      R__b >> tauIso;
      R__b >> antiE;
      R__b >> antiMu;
      R__b.CheckByteCount(R__s, R__c, TauObj::IsA());
   } else {
      R__c = R__b.WriteVersion(TauObj::IsA(), kTRUE);
      ParticleObj::Streamer(R__b);
      R__b << nAllTaus;
      R__b << chIso;
      R__b << phIso;
      R__b << puIso;
      R__b << iso;
      R__b << dzPV;
      R__b << dzTau;
      R__b << dzTauErr;
      R__b << dxyTau;
      R__b << dxyTauErr;
      R__b << dxyTauSig;
      R__b << dzTrk;
      R__b << dzTrkErr;
      R__b << dxyTrk;
      R__b << dxyTrkErr;
      R__b << hasKft;
      R__b << hasSecVtx;
      R__b << flightLength;
      R__b << flightLengthError;
      R__b << flightLengthSig;
      R__b << genPdgId;
      R__b << nGenPart;
      R__b << leadGenPt;
      R__b << genTauJetPt;
      R__b << decMode;
      R__b << genDecMode;
      R__b << visMass;
      R__b << genVisMass;
      R__b << tauIso;
      R__b << antiE;
      R__b << antiMu;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TauObj::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TauObj.
      TClass *R__cl = ::TauObj::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nAllTaus", &nAllTaus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chIso", &chIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phIso", &phIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "puIso", &puIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iso", &iso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dzPV", &dzPV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dzTau", &dzTau);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dzTauErr", &dzTauErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxyTau", &dxyTau);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxyTauErr", &dxyTauErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxyTauSig", &dxyTauSig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dzTrk", &dzTrk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dzTrkErr", &dzTrkErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxyTrk", &dxyTrk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxyTrkErr", &dxyTrkErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasKft", &hasKft);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasSecVtx", &hasSecVtx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flightLength", &flightLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flightLengthError", &flightLengthError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flightLengthSig", &flightLengthSig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genPdgId", &genPdgId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nGenPart", &nGenPart);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leadGenPt", &leadGenPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genTauJetPt", &genTauJetPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "decMode", &decMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genDecMode", &genDecMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "visMass", &visMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genVisMass", &genVisMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tauIso", &tauIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "antiE", &antiE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "antiMu", &antiMu);
      ParticleObj::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TauObj(void *p) {
      return  p ? new(p) ::TauObj : new ::TauObj;
   }
   static void *newArray_TauObj(Long_t nElements, void *p) {
      return p ? new(p) ::TauObj[nElements] : new ::TauObj[nElements];
   }
   // Wrapper around operator delete
   static void delete_TauObj(void *p) {
      delete ((::TauObj*)p);
   }
   static void deleteArray_TauObj(void *p) {
      delete [] ((::TauObj*)p);
   }
   static void destruct_TauObj(void *p) {
      typedef ::TauObj current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TauObj(TBuffer &buf, void *obj) {
      ((::TauObj*)obj)->::TauObj::Streamer(buf);
   }
} // end of namespace ROOT for class ::TauObj

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<TauObj,allocator<TauObj> >::iterator : new ::vector<TauObj,allocator<TauObj> >::iterator;
   }
   static void *newArray_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<TauObj,allocator<TauObj> >::iterator[nElements] : new ::vector<TauObj,allocator<TauObj> >::iterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator(void *p) {
      delete ((::vector<TauObj,allocator<TauObj> >::iterator*)p);
   }
   static void deleteArray_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator(void *p) {
      delete [] ((::vector<TauObj,allocator<TauObj> >::iterator*)p);
   }
   static void destruct_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator(void *p) {
      typedef ::vector<TauObj,allocator<TauObj> >::iterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::vector<TauObj,allocator<TauObj> >::iterator

//______________________________________________________________________________
void DiTauObj::Streamer(TBuffer &R__b)
{
   // Stream an object of class DiTauObj.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      ParticleObj::Streamer(R__b);
      R__b >> leg1Idx;
      R__b >> leg1PdgId;
      R__b >> leg2Idx;
      R__b >> leg2PdgId;
      R__b >> metIdx;
      R__b >> svFitMass;
      R__b >> svFitMassErrUp;
      R__b >> svFitMassErrDown;
      R__b >> svFitPt;
      R__b >> svFitPtErrUp;
      R__b >> svFitPtErrDown;
      R__b.CheckByteCount(R__s, R__c, DiTauObj::IsA());
   } else {
      R__c = R__b.WriteVersion(DiTauObj::IsA(), kTRUE);
      ParticleObj::Streamer(R__b);
      R__b << leg1Idx;
      R__b << leg1PdgId;
      R__b << leg2Idx;
      R__b << leg2PdgId;
      R__b << metIdx;
      R__b << svFitMass;
      R__b << svFitMassErrUp;
      R__b << svFitMassErrDown;
      R__b << svFitPt;
      R__b << svFitPtErrUp;
      R__b << svFitPtErrDown;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void DiTauObj::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class DiTauObj.
      TClass *R__cl = ::DiTauObj::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leg1Idx", &leg1Idx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leg1PdgId", &leg1PdgId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leg2Idx", &leg2Idx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leg2PdgId", &leg2PdgId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "metIdx", &metIdx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "svFitMass", &svFitMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "svFitMassErrUp", &svFitMassErrUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "svFitMassErrDown", &svFitMassErrDown);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "svFitPt", &svFitPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "svFitPtErrUp", &svFitPtErrUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "svFitPtErrDown", &svFitPtErrDown);
      ParticleObj::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_DiTauObj(void *p) {
      return  p ? new(p) ::DiTauObj : new ::DiTauObj;
   }
   static void *newArray_DiTauObj(Long_t nElements, void *p) {
      return p ? new(p) ::DiTauObj[nElements] : new ::DiTauObj[nElements];
   }
   // Wrapper around operator delete
   static void delete_DiTauObj(void *p) {
      delete ((::DiTauObj*)p);
   }
   static void deleteArray_DiTauObj(void *p) {
      delete [] ((::DiTauObj*)p);
   }
   static void destruct_DiTauObj(void *p) {
      typedef ::DiTauObj current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_DiTauObj(TBuffer &buf, void *obj) {
      ((::DiTauObj*)obj)->::DiTauObj::Streamer(buf);
   }
} // end of namespace ROOT for class ::DiTauObj

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<DiTauObj,allocator<DiTauObj> >::iterator : new ::vector<DiTauObj,allocator<DiTauObj> >::iterator;
   }
   static void *newArray_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<DiTauObj,allocator<DiTauObj> >::iterator[nElements] : new ::vector<DiTauObj,allocator<DiTauObj> >::iterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator(void *p) {
      delete ((::vector<DiTauObj,allocator<DiTauObj> >::iterator*)p);
   }
   static void deleteArray_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator(void *p) {
      delete [] ((::vector<DiTauObj,allocator<DiTauObj> >::iterator*)p);
   }
   static void destruct_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator(void *p) {
      typedef ::vector<DiTauObj,allocator<DiTauObj> >::iterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::vector<DiTauObj,allocator<DiTauObj> >::iterator

namespace ROOT {
   void vectorlEDiTauObjgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEDiTauObjgR_Dictionary();
   static void *new_vectorlEDiTauObjgR(void *p = 0);
   static void *newArray_vectorlEDiTauObjgR(Long_t size, void *p);
   static void delete_vectorlEDiTauObjgR(void *p);
   static void deleteArray_vectorlEDiTauObjgR(void *p);
   static void destruct_vectorlEDiTauObjgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<DiTauObj>*)
   {
      vector<DiTauObj> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<DiTauObj>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<DiTauObj>", -2, "/cvmfs/cms.cern.ch/slc6_amd64_gcc481/lcg/root/5.34.10-cms7/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<DiTauObj>), DefineBehavior(ptr, ptr),
                  0, &vectorlEDiTauObjgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<DiTauObj>) );
      instance.SetNew(&new_vectorlEDiTauObjgR);
      instance.SetNewArray(&newArray_vectorlEDiTauObjgR);
      instance.SetDelete(&delete_vectorlEDiTauObjgR);
      instance.SetDeleteArray(&deleteArray_vectorlEDiTauObjgR);
      instance.SetDestructor(&destruct_vectorlEDiTauObjgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<DiTauObj> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<DiTauObj>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEDiTauObjgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<DiTauObj>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEDiTauObjgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<DiTauObj> : new vector<DiTauObj>;
   }
   static void *newArray_vectorlEDiTauObjgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<DiTauObj>[nElements] : new vector<DiTauObj>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEDiTauObjgR(void *p) {
      delete ((vector<DiTauObj>*)p);
   }
   static void deleteArray_vectorlEDiTauObjgR(void *p) {
      delete [] ((vector<DiTauObj>*)p);
   }
   static void destruct_vectorlEDiTauObjgR(void *p) {
      typedef vector<DiTauObj> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<DiTauObj>

namespace ROOT {
   void vectorlEMuonObjgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMuonObjgR_Dictionary();
   static void *new_vectorlEMuonObjgR(void *p = 0);
   static void *newArray_vectorlEMuonObjgR(Long_t size, void *p);
   static void delete_vectorlEMuonObjgR(void *p);
   static void deleteArray_vectorlEMuonObjgR(void *p);
   static void destruct_vectorlEMuonObjgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MuonObj>*)
   {
      vector<MuonObj> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MuonObj>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MuonObj>", -2, "/cvmfs/cms.cern.ch/slc6_amd64_gcc481/lcg/root/5.34.10-cms7/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MuonObj>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMuonObjgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<MuonObj>) );
      instance.SetNew(&new_vectorlEMuonObjgR);
      instance.SetNewArray(&newArray_vectorlEMuonObjgR);
      instance.SetDelete(&delete_vectorlEMuonObjgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMuonObjgR);
      instance.SetDestructor(&destruct_vectorlEMuonObjgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MuonObj> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MuonObj>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMuonObjgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MuonObj>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMuonObjgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MuonObj> : new vector<MuonObj>;
   }
   static void *newArray_vectorlEMuonObjgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MuonObj>[nElements] : new vector<MuonObj>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMuonObjgR(void *p) {
      delete ((vector<MuonObj>*)p);
   }
   static void deleteArray_vectorlEMuonObjgR(void *p) {
      delete [] ((vector<MuonObj>*)p);
   }
   static void destruct_vectorlEMuonObjgR(void *p) {
      typedef vector<MuonObj> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MuonObj>

namespace ROOT {
   void vectorlEParticleObjgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEParticleObjgR_Dictionary();
   static void *new_vectorlEParticleObjgR(void *p = 0);
   static void *newArray_vectorlEParticleObjgR(Long_t size, void *p);
   static void delete_vectorlEParticleObjgR(void *p);
   static void deleteArray_vectorlEParticleObjgR(void *p);
   static void destruct_vectorlEParticleObjgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<ParticleObj>*)
   {
      vector<ParticleObj> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<ParticleObj>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<ParticleObj>", -2, "/cvmfs/cms.cern.ch/slc6_amd64_gcc481/lcg/root/5.34.10-cms7/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<ParticleObj>), DefineBehavior(ptr, ptr),
                  0, &vectorlEParticleObjgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<ParticleObj>) );
      instance.SetNew(&new_vectorlEParticleObjgR);
      instance.SetNewArray(&newArray_vectorlEParticleObjgR);
      instance.SetDelete(&delete_vectorlEParticleObjgR);
      instance.SetDeleteArray(&deleteArray_vectorlEParticleObjgR);
      instance.SetDestructor(&destruct_vectorlEParticleObjgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<ParticleObj> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<ParticleObj>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEParticleObjgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<ParticleObj>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEParticleObjgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<ParticleObj> : new vector<ParticleObj>;
   }
   static void *newArray_vectorlEParticleObjgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<ParticleObj>[nElements] : new vector<ParticleObj>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEParticleObjgR(void *p) {
      delete ((vector<ParticleObj>*)p);
   }
   static void deleteArray_vectorlEParticleObjgR(void *p) {
      delete [] ((vector<ParticleObj>*)p);
   }
   static void destruct_vectorlEParticleObjgR(void *p) {
      typedef vector<ParticleObj> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<ParticleObj>

namespace ROOT {
   void vectorlETauObjgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETauObjgR_Dictionary();
   static void *new_vectorlETauObjgR(void *p = 0);
   static void *newArray_vectorlETauObjgR(Long_t size, void *p);
   static void delete_vectorlETauObjgR(void *p);
   static void deleteArray_vectorlETauObjgR(void *p);
   static void destruct_vectorlETauObjgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TauObj>*)
   {
      vector<TauObj> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TauObj>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TauObj>", -2, "/cvmfs/cms.cern.ch/slc6_amd64_gcc481/lcg/root/5.34.10-cms7/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<TauObj>), DefineBehavior(ptr, ptr),
                  0, &vectorlETauObjgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TauObj>) );
      instance.SetNew(&new_vectorlETauObjgR);
      instance.SetNewArray(&newArray_vectorlETauObjgR);
      instance.SetDelete(&delete_vectorlETauObjgR);
      instance.SetDeleteArray(&deleteArray_vectorlETauObjgR);
      instance.SetDestructor(&destruct_vectorlETauObjgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TauObj> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TauObj>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETauObjgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TauObj>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETauObjgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TauObj> : new vector<TauObj>;
   }
   static void *newArray_vectorlETauObjgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TauObj>[nElements] : new vector<TauObj>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETauObjgR(void *p) {
      delete ((vector<TauObj>*)p);
   }
   static void deleteArray_vectorlETauObjgR(void *p) {
      delete [] ((vector<TauObj>*)p);
   }
   static void destruct_vectorlETauObjgR(void *p) {
      typedef vector<TauObj> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TauObj>

/********************************************************
* Test/MiniAnalyzer/src/MyRootDict.cpp
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableMyRootDict();

extern "C" void G__set_cpp_environmentMyRootDict() {
  G__cpp_reset_tagtableMyRootDict();
}
#include <new>
extern "C" int G__cpp_dllrevMyRootDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* ParticleObj */
static int G__MyRootDict_168_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ParticleObj* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ParticleObj(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (int) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) ParticleObj(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (int) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ParticleObj(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) ParticleObj(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ParticleObj(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) ParticleObj(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ParticleObj((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) ParticleObj((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ParticleObj((float) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) ParticleObj((float) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ParticleObj[n];
       } else {
         p = new((void*) gvp) ParticleObj[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ParticleObj;
       } else {
         p = new((void*) gvp) ParticleObj;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_168_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ParticleObj*) G__getstructoffset())->setKine((float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (int) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_168_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ParticleObj*) G__getstructoffset())->pt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_168_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ParticleObj*) G__getstructoffset())->eta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_168_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ParticleObj*) G__getstructoffset())->phi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_168_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ParticleObj*) G__getstructoffset())->mass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_168_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ParticleObj*) G__getstructoffset())->charge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_168_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ParticleObj::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_168_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ParticleObj::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_168_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ParticleObj::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_168_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ParticleObj::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_168_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ParticleObj*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_168_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ParticleObj::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_168_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ParticleObj::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_168_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ParticleObj::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_168_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ParticleObj::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MyRootDict_168_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ParticleObj* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ParticleObj(*(ParticleObj*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ParticleObj G__TParticleObj;
static int G__MyRootDict_168_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ParticleObj*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ParticleObj*) (soff+(sizeof(ParticleObj)*i)))->~G__TParticleObj();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ParticleObj*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ParticleObj*) (soff))->~G__TParticleObj();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MyRootDict_168_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ParticleObj* dest = (ParticleObj*) G__getstructoffset();
   *dest = *(ParticleObj*) libp->para[0].ref;
   const ParticleObj& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DiTauObj */
static int G__MyRootDict_169_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DiTauObj* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DiTauObj(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (int) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) DiTauObj(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (int) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DiTauObj(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) DiTauObj(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DiTauObj(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) DiTauObj(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DiTauObj((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) DiTauObj((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DiTauObj((float) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) DiTauObj((float) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new DiTauObj[n];
       } else {
         p = new((void*) gvp) DiTauObj[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new DiTauObj;
       } else {
         p = new((void*) gvp) DiTauObj;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_169_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) DiTauObj::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_169_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DiTauObj::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_169_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) DiTauObj::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_169_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      DiTauObj::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_169_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DiTauObj*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_169_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DiTauObj::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_169_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DiTauObj::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_169_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DiTauObj::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_169_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DiTauObj::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MyRootDict_169_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DiTauObj* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DiTauObj(*(DiTauObj*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DiTauObj G__TDiTauObj;
static int G__MyRootDict_169_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DiTauObj*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DiTauObj*) (soff+(sizeof(DiTauObj)*i)))->~G__TDiTauObj();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DiTauObj*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DiTauObj*) (soff))->~G__TDiTauObj();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MyRootDict_169_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DiTauObj* dest = (DiTauObj*) G__getstructoffset();
   *dest = *(DiTauObj*) libp->para[0].ref;
   const DiTauObj& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MuonObj */
static int G__MyRootDict_170_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MuonObj* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MuonObj(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (int) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) MuonObj(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (int) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MuonObj(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) MuonObj(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MuonObj(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) MuonObj(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MuonObj((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) MuonObj((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MuonObj((float) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) MuonObj((float) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MuonObj[n];
       } else {
         p = new((void*) gvp) MuonObj[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MuonObj;
       } else {
         p = new((void*) gvp) MuonObj;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_MuonObj));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_170_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MuonObj*) G__getstructoffset())->setBits(
(bool) G__int(libp->para[0]), (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (bool) G__int(libp->para[3])
, (bool) G__int(libp->para[4]), (bool) G__int(libp->para[5])
, (bool) G__int(libp->para[6]), (bool) G__int(libp->para[7])
, (bool) G__int(libp->para[8]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_170_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MuonObj*) G__getstructoffset())->isGood());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_170_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MuonObj*) G__getstructoffset())->isLoose());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_170_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MuonObj*) G__getstructoffset())->isTight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_170_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MuonObj*) G__getstructoffset())->isPF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_170_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MuonObj*) G__getstructoffset())->isGlobal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_170_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MuonObj*) G__getstructoffset())->isTracker());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_170_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MuonObj*) G__getstructoffset())->isOuter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_170_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MuonObj*) G__getstructoffset())->isCalo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_170_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MuonObj*) G__getstructoffset())->isMatched());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_170_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MuonObj::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_170_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MuonObj::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_170_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MuonObj::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_170_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MuonObj::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_170_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MuonObj*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_170_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MuonObj::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_170_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MuonObj::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_170_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MuonObj::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_170_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MuonObj::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MyRootDict_170_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MuonObj* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MuonObj(*(MuonObj*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_MuonObj));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MuonObj G__TMuonObj;
static int G__MyRootDict_170_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MuonObj*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MuonObj*) (soff+(sizeof(MuonObj)*i)))->~G__TMuonObj();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MuonObj*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MuonObj*) (soff))->~G__TMuonObj();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MyRootDict_170_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MuonObj* dest = (MuonObj*) G__getstructoffset();
   *dest = *(MuonObj*) libp->para[0].ref;
   const MuonObj& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TauObj */
static int G__MyRootDict_171_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TauObj* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TauObj(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (int) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TauObj(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (int) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TauObj(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) TauObj(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TauObj(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) TauObj(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TauObj((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) TauObj((float) G__double(libp->para[0]), (float) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TauObj((float) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) TauObj((float) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TauObj[n];
       } else {
         p = new((void*) gvp) TauObj[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TauObj;
       } else {
         p = new((void*) gvp) TauObj;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_TauObj));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_171_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TauObj::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_171_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TauObj::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_171_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TauObj::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_171_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TauObj::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_171_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TauObj*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_171_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TauObj::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_171_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TauObj::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_171_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TauObj::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_171_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TauObj::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MyRootDict_171_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TauObj* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TauObj(*(TauObj*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_TauObj));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TauObj G__TTauObj;
static int G__MyRootDict_171_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TauObj*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TauObj*) (soff+(sizeof(TauObj)*i)))->~G__TTauObj();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TauObj*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TauObj*) (soff))->~G__TTauObj();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MyRootDict_171_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TauObj* dest = (TauObj*) G__getstructoffset();
   *dest = *(TauObj*) libp->para[0].ref;
   const TauObj& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<ParticleObj,allocator<ParticleObj> > */
static int G__MyRootDict_173_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<ParticleObj,allocator<ParticleObj> >::reference obj = ((vector<ParticleObj,allocator<ParticleObj> >*) G__getstructoffset())->at((vector<ParticleObj,allocator<ParticleObj> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<ParticleObj,allocator<ParticleObj> >::const_reference obj = ((const vector<ParticleObj,allocator<ParticleObj> >*) G__getstructoffset())->at((vector<ParticleObj,allocator<ParticleObj> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<ParticleObj,allocator<ParticleObj> >::iterator* pobj;
         vector<ParticleObj,allocator<ParticleObj> >::iterator xobj = ((vector<ParticleObj,allocator<ParticleObj> >*) G__getstructoffset())->begin();
         pobj = new vector<ParticleObj,allocator<ParticleObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<ParticleObj,allocator<ParticleObj> >::iterator* pobj;
         vector<ParticleObj,allocator<ParticleObj> >::iterator xobj = ((vector<ParticleObj,allocator<ParticleObj> >*) G__getstructoffset())->end();
         pobj = new vector<ParticleObj,allocator<ParticleObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<ParticleObj,allocator<ParticleObj> >::reverse_iterator* pobj;
         vector<ParticleObj,allocator<ParticleObj> >::reverse_iterator xobj = ((vector<ParticleObj,allocator<ParticleObj> >*) G__getstructoffset())->rbegin();
         pobj = new vector<ParticleObj,allocator<ParticleObj> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<ParticleObj,allocator<ParticleObj> >::reverse_iterator* pobj;
         vector<ParticleObj,allocator<ParticleObj> >::reverse_iterator xobj = ((vector<ParticleObj,allocator<ParticleObj> >*) G__getstructoffset())->rend();
         pobj = new vector<ParticleObj,allocator<ParticleObj> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<ParticleObj,allocator<ParticleObj> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<ParticleObj,allocator<ParticleObj> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ParticleObj,allocator<ParticleObj> >*) G__getstructoffset())->resize((vector<ParticleObj,allocator<ParticleObj> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ParticleObj,allocator<ParticleObj> >*) G__getstructoffset())->resize((vector<ParticleObj,allocator<ParticleObj> >::size_type) G__int(libp->para[0]), *((ParticleObj*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<ParticleObj,allocator<ParticleObj> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<ParticleObj,allocator<ParticleObj> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<ParticleObj,allocator<ParticleObj> >::reference obj = ((vector<ParticleObj,allocator<ParticleObj> >*) G__getstructoffset())->operator[]((vector<ParticleObj,allocator<ParticleObj> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<ParticleObj,allocator<ParticleObj> >::const_reference obj = ((const vector<ParticleObj,allocator<ParticleObj> >*) G__getstructoffset())->operator[]((vector<ParticleObj,allocator<ParticleObj> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<ParticleObj,allocator<ParticleObj> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<ParticleObj,allocator<ParticleObj> >[n];
     } else {
       p = new((void*) gvp) vector<ParticleObj,allocator<ParticleObj> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<ParticleObj,allocator<ParticleObj> >;
     } else {
       p = new((void*) gvp) vector<ParticleObj,allocator<ParticleObj> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<ParticleObj,allocator<ParticleObj> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<ParticleObj,allocator<ParticleObj> >((vector<ParticleObj,allocator<ParticleObj> >::size_type) G__int(libp->para[0]), *(ParticleObj*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<ParticleObj,allocator<ParticleObj> >((vector<ParticleObj,allocator<ParticleObj> >::size_type) G__int(libp->para[0]), *(ParticleObj*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<ParticleObj,allocator<ParticleObj> >((vector<ParticleObj,allocator<ParticleObj> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<ParticleObj,allocator<ParticleObj> >((vector<ParticleObj,allocator<ParticleObj> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<ParticleObj,allocator<ParticleObj> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<ParticleObj,allocator<ParticleObj> >(*(vector<ParticleObj,allocator<ParticleObj> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<ParticleObj,allocator<ParticleObj> >(*(vector<ParticleObj,allocator<ParticleObj> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<ParticleObj,allocator<ParticleObj> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<ParticleObj,allocator<ParticleObj> >(*((vector<ParticleObj,allocator<ParticleObj> >::const_iterator*) G__int(libp->para[0])), *((vector<ParticleObj,allocator<ParticleObj> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<ParticleObj,allocator<ParticleObj> >(*((vector<ParticleObj,allocator<ParticleObj> >::const_iterator*) G__int(libp->para[0])), *((vector<ParticleObj,allocator<ParticleObj> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<ParticleObj,allocator<ParticleObj> >& obj = ((vector<ParticleObj,allocator<ParticleObj> >*) G__getstructoffset())->operator=(*(vector<ParticleObj,allocator<ParticleObj> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ParticleObj,allocator<ParticleObj> >*) G__getstructoffset())->reserve((vector<ParticleObj,allocator<ParticleObj> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ParticleObj& obj = ((vector<ParticleObj,allocator<ParticleObj> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ParticleObj& obj = ((vector<ParticleObj,allocator<ParticleObj> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ParticleObj,allocator<ParticleObj> >*) G__getstructoffset())->push_back(*(ParticleObj*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ParticleObj,allocator<ParticleObj> >*) G__getstructoffset())->swap(*(vector<ParticleObj,allocator<ParticleObj> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<ParticleObj,allocator<ParticleObj> >::iterator* pobj;
         vector<ParticleObj,allocator<ParticleObj> >::iterator xobj = ((vector<ParticleObj,allocator<ParticleObj> >*) G__getstructoffset())->insert(*((vector<ParticleObj,allocator<ParticleObj> >::iterator*) G__int(libp->para[0])), *(ParticleObj*) libp->para[1].ref);
         pobj = new vector<ParticleObj,allocator<ParticleObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ParticleObj,allocator<ParticleObj> >*) G__getstructoffset())->insert(*((vector<ParticleObj,allocator<ParticleObj> >::iterator*) G__int(libp->para[0])), *((vector<ParticleObj,allocator<ParticleObj> >::const_iterator*) G__int(libp->para[1]))
, *((vector<ParticleObj,allocator<ParticleObj> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ParticleObj,allocator<ParticleObj> >*) G__getstructoffset())->insert(*((vector<ParticleObj,allocator<ParticleObj> >::iterator*) G__int(libp->para[0])), (vector<ParticleObj,allocator<ParticleObj> >::size_type) G__int(libp->para[1])
, *(ParticleObj*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ParticleObj,allocator<ParticleObj> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ParticleObj,allocator<ParticleObj> >*) G__getstructoffset())->erase(*((vector<ParticleObj,allocator<ParticleObj> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ParticleObj,allocator<ParticleObj> >*) G__getstructoffset())->erase(*((vector<ParticleObj,allocator<ParticleObj> >::iterator*) G__int(libp->para[0])), *((vector<ParticleObj,allocator<ParticleObj> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_173_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ParticleObj,allocator<ParticleObj> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<ParticleObj,allocator<ParticleObj> > G__TvectorlEParticleObjcOallocatorlEParticleObjgRsPgR;
static int G__MyRootDict_173_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<ParticleObj,allocator<ParticleObj> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<ParticleObj,allocator<ParticleObj> >*) (soff+(sizeof(vector<ParticleObj,allocator<ParticleObj> >)*i)))->~G__TvectorlEParticleObjcOallocatorlEParticleObjgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<ParticleObj,allocator<ParticleObj> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<ParticleObj,allocator<ParticleObj> >*) (soff))->~G__TvectorlEParticleObjcOallocatorlEParticleObjgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<ParticleObj,allocator<ParticleObj> >::iterator */
static int G__MyRootDict_174_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<ParticleObj,allocator<ParticleObj> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<ParticleObj,allocator<ParticleObj> >::iterator[n];
     } else {
       p = new((void*) gvp) vector<ParticleObj,allocator<ParticleObj> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<ParticleObj,allocator<ParticleObj> >::iterator;
     } else {
       p = new((void*) gvp) vector<ParticleObj,allocator<ParticleObj> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_174_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<ParticleObj,allocator<ParticleObj> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<ParticleObj,allocator<ParticleObj> >::iterator(libp->para[0].ref ? *(const vector<ParticleObj,allocator<ParticleObj> >::iterator::pointer*) libp->para[0].ref : *(const vector<ParticleObj,allocator<ParticleObj> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   } else {
     p = new((void*) gvp) vector<ParticleObj,allocator<ParticleObj> >::iterator(libp->para[0].ref ? *(const vector<ParticleObj,allocator<ParticleObj> >::iterator::pointer*) libp->para[0].ref : *(const vector<ParticleObj,allocator<ParticleObj> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_174_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<ParticleObj,allocator<ParticleObj> >::iterator::reference obj = ((const vector<ParticleObj,allocator<ParticleObj> >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_174_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const vector<ParticleObj,allocator<ParticleObj> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_174_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<ParticleObj,allocator<ParticleObj> >::iterator& obj = ((vector<ParticleObj,allocator<ParticleObj> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_174_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<ParticleObj,allocator<ParticleObj> >::iterator* pobj;
         vector<ParticleObj,allocator<ParticleObj> >::iterator xobj = ((vector<ParticleObj,allocator<ParticleObj> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new vector<ParticleObj,allocator<ParticleObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_174_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<ParticleObj,allocator<ParticleObj> >::iterator& obj = ((vector<ParticleObj,allocator<ParticleObj> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_174_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<ParticleObj,allocator<ParticleObj> >::iterator* pobj;
         vector<ParticleObj,allocator<ParticleObj> >::iterator xobj = ((vector<ParticleObj,allocator<ParticleObj> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new vector<ParticleObj,allocator<ParticleObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_174_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<ParticleObj,allocator<ParticleObj> >::iterator::reference obj = ((const vector<ParticleObj,allocator<ParticleObj> >::iterator*) G__getstructoffset())->operator[](*(vector<ParticleObj,allocator<ParticleObj> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_174_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<ParticleObj,allocator<ParticleObj> >::iterator& obj = ((vector<ParticleObj,allocator<ParticleObj> >::iterator*) G__getstructoffset())->operator+=(*(vector<ParticleObj,allocator<ParticleObj> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_174_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<ParticleObj,allocator<ParticleObj> >::iterator* pobj;
         const vector<ParticleObj,allocator<ParticleObj> >::iterator xobj = ((const vector<ParticleObj,allocator<ParticleObj> >::iterator*) G__getstructoffset())->operator+(*(vector<ParticleObj,allocator<ParticleObj> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<ParticleObj,allocator<ParticleObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_174_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<ParticleObj,allocator<ParticleObj> >::iterator& obj = ((vector<ParticleObj,allocator<ParticleObj> >::iterator*) G__getstructoffset())->operator-=(*(vector<ParticleObj,allocator<ParticleObj> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_174_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<ParticleObj,allocator<ParticleObj> >::iterator* pobj;
         const vector<ParticleObj,allocator<ParticleObj> >::iterator xobj = ((const vector<ParticleObj,allocator<ParticleObj> >::iterator*) G__getstructoffset())->operator-(*(vector<ParticleObj,allocator<ParticleObj> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<ParticleObj,allocator<ParticleObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_174_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<ParticleObj,allocator<ParticleObj> >::iterator::pointer& obj = ((const vector<ParticleObj,allocator<ParticleObj> >::iterator*) G__getstructoffset())->base();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_174_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<ParticleObj,allocator<ParticleObj> >::iterator* pobj;
         vector<ParticleObj,allocator<ParticleObj> >::iterator xobj = ((vector<ParticleObj,allocator<ParticleObj> >::iterator*) G__getstructoffset())->operator=(*(vector<ParticleObj,allocator<ParticleObj> >::iterator*) libp->para[0].ref);
         pobj = new vector<ParticleObj,allocator<ParticleObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MyRootDict_174_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   vector<ParticleObj,allocator<ParticleObj> >::iterator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new vector<ParticleObj,allocator<ParticleObj> >::iterator(*(vector<ParticleObj,allocator<ParticleObj> >::iterator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<ParticleObj,allocator<ParticleObj> >::iterator G__TvectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator;
static int G__MyRootDict_174_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<ParticleObj,allocator<ParticleObj> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<ParticleObj,allocator<ParticleObj> >::iterator*) (soff+(sizeof(vector<ParticleObj,allocator<ParticleObj> >::iterator)*i)))->~G__TvectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<ParticleObj,allocator<ParticleObj> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<ParticleObj,allocator<ParticleObj> >::iterator*) (soff))->~G__TvectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MuonObj,allocator<MuonObj> > */
static int G__MyRootDict_177_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MuonObj,allocator<MuonObj> >::reference obj = ((vector<MuonObj,allocator<MuonObj> >*) G__getstructoffset())->at((vector<MuonObj,allocator<MuonObj> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MuonObj,allocator<MuonObj> >::const_reference obj = ((const vector<MuonObj,allocator<MuonObj> >*) G__getstructoffset())->at((vector<MuonObj,allocator<MuonObj> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MuonObj,allocator<MuonObj> >::iterator* pobj;
         vector<MuonObj,allocator<MuonObj> >::iterator xobj = ((vector<MuonObj,allocator<MuonObj> >*) G__getstructoffset())->begin();
         pobj = new vector<MuonObj,allocator<MuonObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MuonObj,allocator<MuonObj> >::iterator* pobj;
         vector<MuonObj,allocator<MuonObj> >::iterator xobj = ((vector<MuonObj,allocator<MuonObj> >*) G__getstructoffset())->end();
         pobj = new vector<MuonObj,allocator<MuonObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MuonObj,allocator<MuonObj> >::reverse_iterator* pobj;
         vector<MuonObj,allocator<MuonObj> >::reverse_iterator xobj = ((vector<MuonObj,allocator<MuonObj> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MuonObj,allocator<MuonObj> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MuonObj,allocator<MuonObj> >::reverse_iterator* pobj;
         vector<MuonObj,allocator<MuonObj> >::reverse_iterator xobj = ((vector<MuonObj,allocator<MuonObj> >*) G__getstructoffset())->rend();
         pobj = new vector<MuonObj,allocator<MuonObj> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MuonObj,allocator<MuonObj> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MuonObj,allocator<MuonObj> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MuonObj,allocator<MuonObj> >*) G__getstructoffset())->resize((vector<MuonObj,allocator<MuonObj> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MuonObj,allocator<MuonObj> >*) G__getstructoffset())->resize((vector<MuonObj,allocator<MuonObj> >::size_type) G__int(libp->para[0]), *((MuonObj*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<MuonObj,allocator<MuonObj> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MuonObj,allocator<MuonObj> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MuonObj,allocator<MuonObj> >::reference obj = ((vector<MuonObj,allocator<MuonObj> >*) G__getstructoffset())->operator[]((vector<MuonObj,allocator<MuonObj> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MuonObj,allocator<MuonObj> >::const_reference obj = ((const vector<MuonObj,allocator<MuonObj> >*) G__getstructoffset())->operator[]((vector<MuonObj,allocator<MuonObj> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MuonObj,allocator<MuonObj> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MuonObj,allocator<MuonObj> >[n];
     } else {
       p = new((void*) gvp) vector<MuonObj,allocator<MuonObj> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MuonObj,allocator<MuonObj> >;
     } else {
       p = new((void*) gvp) vector<MuonObj,allocator<MuonObj> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MuonObj,allocator<MuonObj> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MuonObj,allocator<MuonObj> >((vector<MuonObj,allocator<MuonObj> >::size_type) G__int(libp->para[0]), *(MuonObj*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MuonObj,allocator<MuonObj> >((vector<MuonObj,allocator<MuonObj> >::size_type) G__int(libp->para[0]), *(MuonObj*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MuonObj,allocator<MuonObj> >((vector<MuonObj,allocator<MuonObj> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MuonObj,allocator<MuonObj> >((vector<MuonObj,allocator<MuonObj> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MuonObj,allocator<MuonObj> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MuonObj,allocator<MuonObj> >(*(vector<MuonObj,allocator<MuonObj> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MuonObj,allocator<MuonObj> >(*(vector<MuonObj,allocator<MuonObj> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MuonObj,allocator<MuonObj> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MuonObj,allocator<MuonObj> >(*((vector<MuonObj,allocator<MuonObj> >::const_iterator*) G__int(libp->para[0])), *((vector<MuonObj,allocator<MuonObj> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MuonObj,allocator<MuonObj> >(*((vector<MuonObj,allocator<MuonObj> >::const_iterator*) G__int(libp->para[0])), *((vector<MuonObj,allocator<MuonObj> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MuonObj,allocator<MuonObj> >& obj = ((vector<MuonObj,allocator<MuonObj> >*) G__getstructoffset())->operator=(*(vector<MuonObj,allocator<MuonObj> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MuonObj,allocator<MuonObj> >*) G__getstructoffset())->reserve((vector<MuonObj,allocator<MuonObj> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MuonObj& obj = ((vector<MuonObj,allocator<MuonObj> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MuonObj& obj = ((vector<MuonObj,allocator<MuonObj> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MuonObj,allocator<MuonObj> >*) G__getstructoffset())->push_back(*(MuonObj*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MuonObj,allocator<MuonObj> >*) G__getstructoffset())->swap(*(vector<MuonObj,allocator<MuonObj> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MuonObj,allocator<MuonObj> >::iterator* pobj;
         vector<MuonObj,allocator<MuonObj> >::iterator xobj = ((vector<MuonObj,allocator<MuonObj> >*) G__getstructoffset())->insert(*((vector<MuonObj,allocator<MuonObj> >::iterator*) G__int(libp->para[0])), *(MuonObj*) libp->para[1].ref);
         pobj = new vector<MuonObj,allocator<MuonObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MuonObj,allocator<MuonObj> >*) G__getstructoffset())->insert(*((vector<MuonObj,allocator<MuonObj> >::iterator*) G__int(libp->para[0])), *((vector<MuonObj,allocator<MuonObj> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MuonObj,allocator<MuonObj> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MuonObj,allocator<MuonObj> >*) G__getstructoffset())->insert(*((vector<MuonObj,allocator<MuonObj> >::iterator*) G__int(libp->para[0])), (vector<MuonObj,allocator<MuonObj> >::size_type) G__int(libp->para[1])
, *(MuonObj*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MuonObj,allocator<MuonObj> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MuonObj,allocator<MuonObj> >*) G__getstructoffset())->erase(*((vector<MuonObj,allocator<MuonObj> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MuonObj,allocator<MuonObj> >*) G__getstructoffset())->erase(*((vector<MuonObj,allocator<MuonObj> >::iterator*) G__int(libp->para[0])), *((vector<MuonObj,allocator<MuonObj> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_177_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MuonObj,allocator<MuonObj> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MuonObj,allocator<MuonObj> > G__TvectorlEMuonObjcOallocatorlEMuonObjgRsPgR;
static int G__MyRootDict_177_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MuonObj,allocator<MuonObj> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MuonObj,allocator<MuonObj> >*) (soff+(sizeof(vector<MuonObj,allocator<MuonObj> >)*i)))->~G__TvectorlEMuonObjcOallocatorlEMuonObjgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MuonObj,allocator<MuonObj> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MuonObj,allocator<MuonObj> >*) (soff))->~G__TvectorlEMuonObjcOallocatorlEMuonObjgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MuonObj,allocator<MuonObj> >::iterator */
static int G__MyRootDict_178_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MuonObj,allocator<MuonObj> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MuonObj,allocator<MuonObj> >::iterator[n];
     } else {
       p = new((void*) gvp) vector<MuonObj,allocator<MuonObj> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MuonObj,allocator<MuonObj> >::iterator;
     } else {
       p = new((void*) gvp) vector<MuonObj,allocator<MuonObj> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_178_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MuonObj,allocator<MuonObj> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MuonObj,allocator<MuonObj> >::iterator(libp->para[0].ref ? *(const vector<MuonObj,allocator<MuonObj> >::iterator::pointer*) libp->para[0].ref : *(const vector<MuonObj,allocator<MuonObj> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   } else {
     p = new((void*) gvp) vector<MuonObj,allocator<MuonObj> >::iterator(libp->para[0].ref ? *(const vector<MuonObj,allocator<MuonObj> >::iterator::pointer*) libp->para[0].ref : *(const vector<MuonObj,allocator<MuonObj> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_178_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MuonObj,allocator<MuonObj> >::iterator::reference obj = ((const vector<MuonObj,allocator<MuonObj> >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_178_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const vector<MuonObj,allocator<MuonObj> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_178_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MuonObj,allocator<MuonObj> >::iterator& obj = ((vector<MuonObj,allocator<MuonObj> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_178_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MuonObj,allocator<MuonObj> >::iterator* pobj;
         vector<MuonObj,allocator<MuonObj> >::iterator xobj = ((vector<MuonObj,allocator<MuonObj> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new vector<MuonObj,allocator<MuonObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_178_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MuonObj,allocator<MuonObj> >::iterator& obj = ((vector<MuonObj,allocator<MuonObj> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_178_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MuonObj,allocator<MuonObj> >::iterator* pobj;
         vector<MuonObj,allocator<MuonObj> >::iterator xobj = ((vector<MuonObj,allocator<MuonObj> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new vector<MuonObj,allocator<MuonObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_178_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MuonObj,allocator<MuonObj> >::iterator::reference obj = ((const vector<MuonObj,allocator<MuonObj> >::iterator*) G__getstructoffset())->operator[](*(vector<MuonObj,allocator<MuonObj> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_178_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MuonObj,allocator<MuonObj> >::iterator& obj = ((vector<MuonObj,allocator<MuonObj> >::iterator*) G__getstructoffset())->operator+=(*(vector<MuonObj,allocator<MuonObj> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_178_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MuonObj,allocator<MuonObj> >::iterator* pobj;
         const vector<MuonObj,allocator<MuonObj> >::iterator xobj = ((const vector<MuonObj,allocator<MuonObj> >::iterator*) G__getstructoffset())->operator+(*(vector<MuonObj,allocator<MuonObj> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<MuonObj,allocator<MuonObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_178_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MuonObj,allocator<MuonObj> >::iterator& obj = ((vector<MuonObj,allocator<MuonObj> >::iterator*) G__getstructoffset())->operator-=(*(vector<MuonObj,allocator<MuonObj> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_178_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MuonObj,allocator<MuonObj> >::iterator* pobj;
         const vector<MuonObj,allocator<MuonObj> >::iterator xobj = ((const vector<MuonObj,allocator<MuonObj> >::iterator*) G__getstructoffset())->operator-(*(vector<MuonObj,allocator<MuonObj> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<MuonObj,allocator<MuonObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_178_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MuonObj,allocator<MuonObj> >::iterator::pointer& obj = ((const vector<MuonObj,allocator<MuonObj> >::iterator*) G__getstructoffset())->base();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_178_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MuonObj,allocator<MuonObj> >::iterator* pobj;
         vector<MuonObj,allocator<MuonObj> >::iterator xobj = ((vector<MuonObj,allocator<MuonObj> >::iterator*) G__getstructoffset())->operator=(*(vector<MuonObj,allocator<MuonObj> >::iterator*) libp->para[0].ref);
         pobj = new vector<MuonObj,allocator<MuonObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MyRootDict_178_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   vector<MuonObj,allocator<MuonObj> >::iterator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new vector<MuonObj,allocator<MuonObj> >::iterator(*(vector<MuonObj,allocator<MuonObj> >::iterator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MuonObj,allocator<MuonObj> >::iterator G__TvectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator;
static int G__MyRootDict_178_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MuonObj,allocator<MuonObj> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MuonObj,allocator<MuonObj> >::iterator*) (soff+(sizeof(vector<MuonObj,allocator<MuonObj> >::iterator)*i)))->~G__TvectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MuonObj,allocator<MuonObj> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MuonObj,allocator<MuonObj> >::iterator*) (soff))->~G__TvectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<TauObj,allocator<TauObj> > */
static int G__MyRootDict_181_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TauObj,allocator<TauObj> >::reference obj = ((vector<TauObj,allocator<TauObj> >*) G__getstructoffset())->at((vector<TauObj,allocator<TauObj> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TauObj,allocator<TauObj> >::const_reference obj = ((const vector<TauObj,allocator<TauObj> >*) G__getstructoffset())->at((vector<TauObj,allocator<TauObj> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TauObj,allocator<TauObj> >::iterator* pobj;
         vector<TauObj,allocator<TauObj> >::iterator xobj = ((vector<TauObj,allocator<TauObj> >*) G__getstructoffset())->begin();
         pobj = new vector<TauObj,allocator<TauObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TauObj,allocator<TauObj> >::iterator* pobj;
         vector<TauObj,allocator<TauObj> >::iterator xobj = ((vector<TauObj,allocator<TauObj> >*) G__getstructoffset())->end();
         pobj = new vector<TauObj,allocator<TauObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TauObj,allocator<TauObj> >::reverse_iterator* pobj;
         vector<TauObj,allocator<TauObj> >::reverse_iterator xobj = ((vector<TauObj,allocator<TauObj> >*) G__getstructoffset())->rbegin();
         pobj = new vector<TauObj,allocator<TauObj> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TauObj,allocator<TauObj> >::reverse_iterator* pobj;
         vector<TauObj,allocator<TauObj> >::reverse_iterator xobj = ((vector<TauObj,allocator<TauObj> >*) G__getstructoffset())->rend();
         pobj = new vector<TauObj,allocator<TauObj> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<TauObj,allocator<TauObj> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<TauObj,allocator<TauObj> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TauObj,allocator<TauObj> >*) G__getstructoffset())->resize((vector<TauObj,allocator<TauObj> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TauObj,allocator<TauObj> >*) G__getstructoffset())->resize((vector<TauObj,allocator<TauObj> >::size_type) G__int(libp->para[0]), *((TauObj*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<TauObj,allocator<TauObj> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<TauObj,allocator<TauObj> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TauObj,allocator<TauObj> >::reference obj = ((vector<TauObj,allocator<TauObj> >*) G__getstructoffset())->operator[]((vector<TauObj,allocator<TauObj> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TauObj,allocator<TauObj> >::const_reference obj = ((const vector<TauObj,allocator<TauObj> >*) G__getstructoffset())->operator[]((vector<TauObj,allocator<TauObj> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TauObj,allocator<TauObj> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TauObj,allocator<TauObj> >[n];
     } else {
       p = new((void*) gvp) vector<TauObj,allocator<TauObj> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TauObj,allocator<TauObj> >;
     } else {
       p = new((void*) gvp) vector<TauObj,allocator<TauObj> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TauObj,allocator<TauObj> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TauObj,allocator<TauObj> >((vector<TauObj,allocator<TauObj> >::size_type) G__int(libp->para[0]), *(TauObj*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<TauObj,allocator<TauObj> >((vector<TauObj,allocator<TauObj> >::size_type) G__int(libp->para[0]), *(TauObj*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TauObj,allocator<TauObj> >((vector<TauObj,allocator<TauObj> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<TauObj,allocator<TauObj> >((vector<TauObj,allocator<TauObj> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TauObj,allocator<TauObj> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<TauObj,allocator<TauObj> >(*(vector<TauObj,allocator<TauObj> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<TauObj,allocator<TauObj> >(*(vector<TauObj,allocator<TauObj> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TauObj,allocator<TauObj> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<TauObj,allocator<TauObj> >(*((vector<TauObj,allocator<TauObj> >::const_iterator*) G__int(libp->para[0])), *((vector<TauObj,allocator<TauObj> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<TauObj,allocator<TauObj> >(*((vector<TauObj,allocator<TauObj> >::const_iterator*) G__int(libp->para[0])), *((vector<TauObj,allocator<TauObj> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TauObj,allocator<TauObj> >& obj = ((vector<TauObj,allocator<TauObj> >*) G__getstructoffset())->operator=(*(vector<TauObj,allocator<TauObj> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TauObj,allocator<TauObj> >*) G__getstructoffset())->reserve((vector<TauObj,allocator<TauObj> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TauObj& obj = ((vector<TauObj,allocator<TauObj> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TauObj& obj = ((vector<TauObj,allocator<TauObj> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TauObj,allocator<TauObj> >*) G__getstructoffset())->push_back(*(TauObj*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TauObj,allocator<TauObj> >*) G__getstructoffset())->swap(*(vector<TauObj,allocator<TauObj> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TauObj,allocator<TauObj> >::iterator* pobj;
         vector<TauObj,allocator<TauObj> >::iterator xobj = ((vector<TauObj,allocator<TauObj> >*) G__getstructoffset())->insert(*((vector<TauObj,allocator<TauObj> >::iterator*) G__int(libp->para[0])), *(TauObj*) libp->para[1].ref);
         pobj = new vector<TauObj,allocator<TauObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TauObj,allocator<TauObj> >*) G__getstructoffset())->insert(*((vector<TauObj,allocator<TauObj> >::iterator*) G__int(libp->para[0])), *((vector<TauObj,allocator<TauObj> >::const_iterator*) G__int(libp->para[1]))
, *((vector<TauObj,allocator<TauObj> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TauObj,allocator<TauObj> >*) G__getstructoffset())->insert(*((vector<TauObj,allocator<TauObj> >::iterator*) G__int(libp->para[0])), (vector<TauObj,allocator<TauObj> >::size_type) G__int(libp->para[1])
, *(TauObj*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TauObj,allocator<TauObj> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TauObj,allocator<TauObj> >*) G__getstructoffset())->erase(*((vector<TauObj,allocator<TauObj> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TauObj,allocator<TauObj> >*) G__getstructoffset())->erase(*((vector<TauObj,allocator<TauObj> >::iterator*) G__int(libp->para[0])), *((vector<TauObj,allocator<TauObj> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_181_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TauObj,allocator<TauObj> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<TauObj,allocator<TauObj> > G__TvectorlETauObjcOallocatorlETauObjgRsPgR;
static int G__MyRootDict_181_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<TauObj,allocator<TauObj> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<TauObj,allocator<TauObj> >*) (soff+(sizeof(vector<TauObj,allocator<TauObj> >)*i)))->~G__TvectorlETauObjcOallocatorlETauObjgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<TauObj,allocator<TauObj> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<TauObj,allocator<TauObj> >*) (soff))->~G__TvectorlETauObjcOallocatorlETauObjgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<TauObj,allocator<TauObj> >::iterator */
static int G__MyRootDict_182_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TauObj,allocator<TauObj> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TauObj,allocator<TauObj> >::iterator[n];
     } else {
       p = new((void*) gvp) vector<TauObj,allocator<TauObj> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TauObj,allocator<TauObj> >::iterator;
     } else {
       p = new((void*) gvp) vector<TauObj,allocator<TauObj> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_182_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TauObj,allocator<TauObj> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<TauObj,allocator<TauObj> >::iterator(libp->para[0].ref ? *(const vector<TauObj,allocator<TauObj> >::iterator::pointer*) libp->para[0].ref : *(const vector<TauObj,allocator<TauObj> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   } else {
     p = new((void*) gvp) vector<TauObj,allocator<TauObj> >::iterator(libp->para[0].ref ? *(const vector<TauObj,allocator<TauObj> >::iterator::pointer*) libp->para[0].ref : *(const vector<TauObj,allocator<TauObj> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_182_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TauObj,allocator<TauObj> >::iterator::reference obj = ((const vector<TauObj,allocator<TauObj> >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_182_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const vector<TauObj,allocator<TauObj> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_182_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TauObj,allocator<TauObj> >::iterator& obj = ((vector<TauObj,allocator<TauObj> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_182_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TauObj,allocator<TauObj> >::iterator* pobj;
         vector<TauObj,allocator<TauObj> >::iterator xobj = ((vector<TauObj,allocator<TauObj> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new vector<TauObj,allocator<TauObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_182_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TauObj,allocator<TauObj> >::iterator& obj = ((vector<TauObj,allocator<TauObj> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_182_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TauObj,allocator<TauObj> >::iterator* pobj;
         vector<TauObj,allocator<TauObj> >::iterator xobj = ((vector<TauObj,allocator<TauObj> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new vector<TauObj,allocator<TauObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_182_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TauObj,allocator<TauObj> >::iterator::reference obj = ((const vector<TauObj,allocator<TauObj> >::iterator*) G__getstructoffset())->operator[](*(vector<TauObj,allocator<TauObj> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_182_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TauObj,allocator<TauObj> >::iterator& obj = ((vector<TauObj,allocator<TauObj> >::iterator*) G__getstructoffset())->operator+=(*(vector<TauObj,allocator<TauObj> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_182_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TauObj,allocator<TauObj> >::iterator* pobj;
         const vector<TauObj,allocator<TauObj> >::iterator xobj = ((const vector<TauObj,allocator<TauObj> >::iterator*) G__getstructoffset())->operator+(*(vector<TauObj,allocator<TauObj> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<TauObj,allocator<TauObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_182_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TauObj,allocator<TauObj> >::iterator& obj = ((vector<TauObj,allocator<TauObj> >::iterator*) G__getstructoffset())->operator-=(*(vector<TauObj,allocator<TauObj> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_182_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TauObj,allocator<TauObj> >::iterator* pobj;
         const vector<TauObj,allocator<TauObj> >::iterator xobj = ((const vector<TauObj,allocator<TauObj> >::iterator*) G__getstructoffset())->operator-(*(vector<TauObj,allocator<TauObj> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<TauObj,allocator<TauObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_182_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TauObj,allocator<TauObj> >::iterator::pointer& obj = ((const vector<TauObj,allocator<TauObj> >::iterator*) G__getstructoffset())->base();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_182_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TauObj,allocator<TauObj> >::iterator* pobj;
         vector<TauObj,allocator<TauObj> >::iterator xobj = ((vector<TauObj,allocator<TauObj> >::iterator*) G__getstructoffset())->operator=(*(vector<TauObj,allocator<TauObj> >::iterator*) libp->para[0].ref);
         pobj = new vector<TauObj,allocator<TauObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MyRootDict_182_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   vector<TauObj,allocator<TauObj> >::iterator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new vector<TauObj,allocator<TauObj> >::iterator(*(vector<TauObj,allocator<TauObj> >::iterator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<TauObj,allocator<TauObj> >::iterator G__TvectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator;
static int G__MyRootDict_182_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<TauObj,allocator<TauObj> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<TauObj,allocator<TauObj> >::iterator*) (soff+(sizeof(vector<TauObj,allocator<TauObj> >::iterator)*i)))->~G__TvectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<TauObj,allocator<TauObj> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<TauObj,allocator<TauObj> >::iterator*) (soff))->~G__TvectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<DiTauObj,allocator<DiTauObj> > */
static int G__MyRootDict_185_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<DiTauObj,allocator<DiTauObj> >::reference obj = ((vector<DiTauObj,allocator<DiTauObj> >*) G__getstructoffset())->at((vector<DiTauObj,allocator<DiTauObj> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DiTauObj,allocator<DiTauObj> >::const_reference obj = ((const vector<DiTauObj,allocator<DiTauObj> >*) G__getstructoffset())->at((vector<DiTauObj,allocator<DiTauObj> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DiTauObj,allocator<DiTauObj> >::iterator* pobj;
         vector<DiTauObj,allocator<DiTauObj> >::iterator xobj = ((vector<DiTauObj,allocator<DiTauObj> >*) G__getstructoffset())->begin();
         pobj = new vector<DiTauObj,allocator<DiTauObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DiTauObj,allocator<DiTauObj> >::iterator* pobj;
         vector<DiTauObj,allocator<DiTauObj> >::iterator xobj = ((vector<DiTauObj,allocator<DiTauObj> >*) G__getstructoffset())->end();
         pobj = new vector<DiTauObj,allocator<DiTauObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DiTauObj,allocator<DiTauObj> >::reverse_iterator* pobj;
         vector<DiTauObj,allocator<DiTauObj> >::reverse_iterator xobj = ((vector<DiTauObj,allocator<DiTauObj> >*) G__getstructoffset())->rbegin();
         pobj = new vector<DiTauObj,allocator<DiTauObj> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DiTauObj,allocator<DiTauObj> >::reverse_iterator* pobj;
         vector<DiTauObj,allocator<DiTauObj> >::reverse_iterator xobj = ((vector<DiTauObj,allocator<DiTauObj> >*) G__getstructoffset())->rend();
         pobj = new vector<DiTauObj,allocator<DiTauObj> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<DiTauObj,allocator<DiTauObj> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<DiTauObj,allocator<DiTauObj> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DiTauObj,allocator<DiTauObj> >*) G__getstructoffset())->resize((vector<DiTauObj,allocator<DiTauObj> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DiTauObj,allocator<DiTauObj> >*) G__getstructoffset())->resize((vector<DiTauObj,allocator<DiTauObj> >::size_type) G__int(libp->para[0]), *((DiTauObj*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<DiTauObj,allocator<DiTauObj> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<DiTauObj,allocator<DiTauObj> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<DiTauObj,allocator<DiTauObj> >::reference obj = ((vector<DiTauObj,allocator<DiTauObj> >*) G__getstructoffset())->operator[]((vector<DiTauObj,allocator<DiTauObj> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DiTauObj,allocator<DiTauObj> >::const_reference obj = ((const vector<DiTauObj,allocator<DiTauObj> >*) G__getstructoffset())->operator[]((vector<DiTauObj,allocator<DiTauObj> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<DiTauObj,allocator<DiTauObj> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<DiTauObj,allocator<DiTauObj> >[n];
     } else {
       p = new((void*) gvp) vector<DiTauObj,allocator<DiTauObj> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<DiTauObj,allocator<DiTauObj> >;
     } else {
       p = new((void*) gvp) vector<DiTauObj,allocator<DiTauObj> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<DiTauObj,allocator<DiTauObj> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<DiTauObj,allocator<DiTauObj> >((vector<DiTauObj,allocator<DiTauObj> >::size_type) G__int(libp->para[0]), *(DiTauObj*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<DiTauObj,allocator<DiTauObj> >((vector<DiTauObj,allocator<DiTauObj> >::size_type) G__int(libp->para[0]), *(DiTauObj*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<DiTauObj,allocator<DiTauObj> >((vector<DiTauObj,allocator<DiTauObj> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<DiTauObj,allocator<DiTauObj> >((vector<DiTauObj,allocator<DiTauObj> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<DiTauObj,allocator<DiTauObj> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<DiTauObj,allocator<DiTauObj> >(*(vector<DiTauObj,allocator<DiTauObj> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<DiTauObj,allocator<DiTauObj> >(*(vector<DiTauObj,allocator<DiTauObj> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<DiTauObj,allocator<DiTauObj> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<DiTauObj,allocator<DiTauObj> >(*((vector<DiTauObj,allocator<DiTauObj> >::const_iterator*) G__int(libp->para[0])), *((vector<DiTauObj,allocator<DiTauObj> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<DiTauObj,allocator<DiTauObj> >(*((vector<DiTauObj,allocator<DiTauObj> >::const_iterator*) G__int(libp->para[0])), *((vector<DiTauObj,allocator<DiTauObj> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<DiTauObj,allocator<DiTauObj> >& obj = ((vector<DiTauObj,allocator<DiTauObj> >*) G__getstructoffset())->operator=(*(vector<DiTauObj,allocator<DiTauObj> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DiTauObj,allocator<DiTauObj> >*) G__getstructoffset())->reserve((vector<DiTauObj,allocator<DiTauObj> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const DiTauObj& obj = ((vector<DiTauObj,allocator<DiTauObj> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const DiTauObj& obj = ((vector<DiTauObj,allocator<DiTauObj> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DiTauObj,allocator<DiTauObj> >*) G__getstructoffset())->push_back(*(DiTauObj*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DiTauObj,allocator<DiTauObj> >*) G__getstructoffset())->swap(*(vector<DiTauObj,allocator<DiTauObj> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DiTauObj,allocator<DiTauObj> >::iterator* pobj;
         vector<DiTauObj,allocator<DiTauObj> >::iterator xobj = ((vector<DiTauObj,allocator<DiTauObj> >*) G__getstructoffset())->insert(*((vector<DiTauObj,allocator<DiTauObj> >::iterator*) G__int(libp->para[0])), *(DiTauObj*) libp->para[1].ref);
         pobj = new vector<DiTauObj,allocator<DiTauObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DiTauObj,allocator<DiTauObj> >*) G__getstructoffset())->insert(*((vector<DiTauObj,allocator<DiTauObj> >::iterator*) G__int(libp->para[0])), *((vector<DiTauObj,allocator<DiTauObj> >::const_iterator*) G__int(libp->para[1]))
, *((vector<DiTauObj,allocator<DiTauObj> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DiTauObj,allocator<DiTauObj> >*) G__getstructoffset())->insert(*((vector<DiTauObj,allocator<DiTauObj> >::iterator*) G__int(libp->para[0])), (vector<DiTauObj,allocator<DiTauObj> >::size_type) G__int(libp->para[1])
, *(DiTauObj*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DiTauObj,allocator<DiTauObj> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DiTauObj,allocator<DiTauObj> >*) G__getstructoffset())->erase(*((vector<DiTauObj,allocator<DiTauObj> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DiTauObj,allocator<DiTauObj> >*) G__getstructoffset())->erase(*((vector<DiTauObj,allocator<DiTauObj> >::iterator*) G__int(libp->para[0])), *((vector<DiTauObj,allocator<DiTauObj> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_185_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DiTauObj,allocator<DiTauObj> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<DiTauObj,allocator<DiTauObj> > G__TvectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR;
static int G__MyRootDict_185_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<DiTauObj,allocator<DiTauObj> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<DiTauObj,allocator<DiTauObj> >*) (soff+(sizeof(vector<DiTauObj,allocator<DiTauObj> >)*i)))->~G__TvectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<DiTauObj,allocator<DiTauObj> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<DiTauObj,allocator<DiTauObj> >*) (soff))->~G__TvectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<DiTauObj,allocator<DiTauObj> >::iterator */
static int G__MyRootDict_186_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<DiTauObj,allocator<DiTauObj> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<DiTauObj,allocator<DiTauObj> >::iterator[n];
     } else {
       p = new((void*) gvp) vector<DiTauObj,allocator<DiTauObj> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<DiTauObj,allocator<DiTauObj> >::iterator;
     } else {
       p = new((void*) gvp) vector<DiTauObj,allocator<DiTauObj> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_186_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<DiTauObj,allocator<DiTauObj> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<DiTauObj,allocator<DiTauObj> >::iterator(libp->para[0].ref ? *(const vector<DiTauObj,allocator<DiTauObj> >::iterator::pointer*) libp->para[0].ref : *(const vector<DiTauObj,allocator<DiTauObj> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   } else {
     p = new((void*) gvp) vector<DiTauObj,allocator<DiTauObj> >::iterator(libp->para[0].ref ? *(const vector<DiTauObj,allocator<DiTauObj> >::iterator::pointer*) libp->para[0].ref : *(const vector<DiTauObj,allocator<DiTauObj> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_186_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<DiTauObj,allocator<DiTauObj> >::iterator::reference obj = ((const vector<DiTauObj,allocator<DiTauObj> >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_186_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const vector<DiTauObj,allocator<DiTauObj> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_186_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<DiTauObj,allocator<DiTauObj> >::iterator& obj = ((vector<DiTauObj,allocator<DiTauObj> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_186_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DiTauObj,allocator<DiTauObj> >::iterator* pobj;
         vector<DiTauObj,allocator<DiTauObj> >::iterator xobj = ((vector<DiTauObj,allocator<DiTauObj> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new vector<DiTauObj,allocator<DiTauObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_186_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<DiTauObj,allocator<DiTauObj> >::iterator& obj = ((vector<DiTauObj,allocator<DiTauObj> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_186_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DiTauObj,allocator<DiTauObj> >::iterator* pobj;
         vector<DiTauObj,allocator<DiTauObj> >::iterator xobj = ((vector<DiTauObj,allocator<DiTauObj> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new vector<DiTauObj,allocator<DiTauObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_186_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<DiTauObj,allocator<DiTauObj> >::iterator::reference obj = ((const vector<DiTauObj,allocator<DiTauObj> >::iterator*) G__getstructoffset())->operator[](*(vector<DiTauObj,allocator<DiTauObj> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_186_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<DiTauObj,allocator<DiTauObj> >::iterator& obj = ((vector<DiTauObj,allocator<DiTauObj> >::iterator*) G__getstructoffset())->operator+=(*(vector<DiTauObj,allocator<DiTauObj> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_186_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<DiTauObj,allocator<DiTauObj> >::iterator* pobj;
         const vector<DiTauObj,allocator<DiTauObj> >::iterator xobj = ((const vector<DiTauObj,allocator<DiTauObj> >::iterator*) G__getstructoffset())->operator+(*(vector<DiTauObj,allocator<DiTauObj> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<DiTauObj,allocator<DiTauObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_186_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<DiTauObj,allocator<DiTauObj> >::iterator& obj = ((vector<DiTauObj,allocator<DiTauObj> >::iterator*) G__getstructoffset())->operator-=(*(vector<DiTauObj,allocator<DiTauObj> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_186_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<DiTauObj,allocator<DiTauObj> >::iterator* pobj;
         const vector<DiTauObj,allocator<DiTauObj> >::iterator xobj = ((const vector<DiTauObj,allocator<DiTauObj> >::iterator*) G__getstructoffset())->operator-(*(vector<DiTauObj,allocator<DiTauObj> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<DiTauObj,allocator<DiTauObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_186_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<DiTauObj,allocator<DiTauObj> >::iterator::pointer& obj = ((const vector<DiTauObj,allocator<DiTauObj> >::iterator*) G__getstructoffset())->base();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyRootDict_186_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DiTauObj,allocator<DiTauObj> >::iterator* pobj;
         vector<DiTauObj,allocator<DiTauObj> >::iterator xobj = ((vector<DiTauObj,allocator<DiTauObj> >::iterator*) G__getstructoffset())->operator=(*(vector<DiTauObj,allocator<DiTauObj> >::iterator*) libp->para[0].ref);
         pobj = new vector<DiTauObj,allocator<DiTauObj> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MyRootDict_186_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   vector<DiTauObj,allocator<DiTauObj> >::iterator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new vector<DiTauObj,allocator<DiTauObj> >::iterator(*(vector<DiTauObj,allocator<DiTauObj> >::iterator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<DiTauObj,allocator<DiTauObj> >::iterator G__TvectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator;
static int G__MyRootDict_186_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<DiTauObj,allocator<DiTauObj> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<DiTauObj,allocator<DiTauObj> >::iterator*) (soff+(sizeof(vector<DiTauObj,allocator<DiTauObj> >::iterator)*i)))->~G__TvectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<DiTauObj,allocator<DiTauObj> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<DiTauObj,allocator<DiTauObj> >::iterator*) (soff))->~G__TvectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* ParticleObj */

/* DiTauObj */

/* MuonObj */

/* TauObj */

/* vector<ParticleObj,allocator<ParticleObj> > */

/* vector<ParticleObj,allocator<ParticleObj> >::iterator */

/* vector<MuonObj,allocator<MuonObj> > */

/* vector<MuonObj,allocator<MuonObj> >::iterator */

/* vector<TauObj,allocator<TauObj> > */

/* vector<TauObj,allocator<TauObj> >::iterator */

/* vector<DiTauObj,allocator<DiTauObj> > */

/* vector<DiTauObj,allocator<DiTauObj> >::iterator */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMyRootDict {
 public:
  G__Sizep2memfuncMyRootDict(): p(&G__Sizep2memfuncMyRootDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMyRootDict::*p)();
};

size_t G__get_sizep2memfuncMyRootDict()
{
  G__Sizep2memfuncMyRootDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMyRootDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj))) {
     ParticleObj *G__Lderived;
     G__Lderived=(ParticleObj*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj),G__get_linked_tagnum(&G__MyRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj))) {
     DiTauObj *G__Lderived;
     G__Lderived=(DiTauObj*)0x1000;
     {
       ParticleObj *G__Lpbase=(ParticleObj*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj),G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj),G__get_linked_tagnum(&G__MyRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MyRootDictLN_MuonObj))) {
     MuonObj *G__Lderived;
     G__Lderived=(MuonObj*)0x1000;
     {
       ParticleObj *G__Lpbase=(ParticleObj*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MyRootDictLN_MuonObj),G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MyRootDictLN_MuonObj),G__get_linked_tagnum(&G__MyRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MyRootDictLN_TauObj))) {
     TauObj *G__Lderived;
     G__Lderived=(TauObj*)0x1000;
     {
       ParticleObj *G__Lpbase=(ParticleObj*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MyRootDictLN_TauObj),G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MyRootDictLN_TauObj),G__get_linked_tagnum(&G__MyRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMyRootDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ParticleObj>",117,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj),256,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj),1,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj),257,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj),1,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj),1,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MuonObj>",117,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__MyRootDictLN_MuonObj),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__MyRootDictLN_MuonObj),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__MyRootDictLN_MuonObj),256,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__MyRootDictLN_MuonObj),1,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__MyRootDictLN_MuonObj),257,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__MyRootDictLN_MuonObj),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__MyRootDictLN_MuonObj),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__MyRootDictLN_MuonObj),1,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__MyRootDictLN_MuonObj),1,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TauObj>",117,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__MyRootDictLN_TauObj),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__MyRootDictLN_TauObj),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__MyRootDictLN_TauObj),256,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__MyRootDictLN_TauObj),1,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__MyRootDictLN_TauObj),257,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__MyRootDictLN_TauObj),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__MyRootDictLN_TauObj),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__MyRootDictLN_TauObj),1,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__MyRootDictLN_TauObj),1,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlETauObjcOallocatorlETauObjgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlETauObjcOallocatorlETauObjgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlETauObjcOallocatorlETauObjgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlETauObjcOallocatorlETauObjgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<DiTauObj>",117,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj),256,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj),1,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj),257,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj),1,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj),1,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* ParticleObj */
static void G__setup_memvarParticleObj(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj));
   { ParticleObj *p; p=(ParticleObj*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"thePt=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"theEta=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"thePhi=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"theMass=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"theCharge=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyRootDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DiTauObj */
static void G__setup_memvarDiTauObj(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj));
   { DiTauObj *p; p=(DiTauObj*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->leg1Idx)-(long)(p)),105,0,0,-1,-1,-1,1,"leg1Idx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leg1PdgId)-(long)(p)),105,0,0,-1,-1,-1,1,"leg1PdgId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leg2Idx)-(long)(p)),105,0,0,-1,-1,-1,1,"leg2Idx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leg2PdgId)-(long)(p)),105,0,0,-1,-1,-1,1,"leg2PdgId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->metIdx)-(long)(p)),105,0,0,-1,-1,-1,1,"metIdx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->svFitMass)-(long)(p)),102,0,0,-1,-1,-1,1,"svFitMass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->svFitMassErrUp)-(long)(p)),102,0,0,-1,-1,-1,1,"svFitMassErrUp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->svFitMassErrDown)-(long)(p)),102,0,0,-1,-1,-1,1,"svFitMassErrDown=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->svFitPt)-(long)(p)),102,0,0,-1,-1,-1,1,"svFitPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->svFitPtErrUp)-(long)(p)),102,0,0,-1,-1,-1,1,"svFitPtErrUp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->svFitPtErrDown)-(long)(p)),102,0,0,-1,-1,-1,1,"svFitPtErrDown=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyRootDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MuonObj */
static void G__setup_memvarMuonObj(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MyRootDictLN_MuonObj));
   { MuonObj *p; p=(MuonObj*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->nRPCHits)-(long)(p)),104,0,0,-1,-1,-1,1,"nRPCHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nDTHits)-(long)(p)),104,0,0,-1,-1,-1,1,"nDTHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nCSCHits)-(long)(p)),104,0,0,-1,-1,-1,1,"nCSCHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nTrackerHits)-(long)(p)),104,0,0,-1,-1,-1,1,"nTrackerHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nMatchedStations)-(long)(p)),104,0,0,-1,-1,-1,1,"nMatchedStations=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isUnique)-(long)(p)),103,0,0,-1,-1,-1,1,"isUnique=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nAllMuons)-(long)(p)),104,0,0,-1,-1,-1,1,"nAllMuons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chHadIso)-(long)(p)),102,0,0,-1,-1,-1,1,"chHadIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chIso)-(long)(p)),102,0,0,-1,-1,-1,1,"chIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nHadIso)-(long)(p)),102,0,0,-1,-1,-1,1,"nHadIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phIso)-(long)(p)),102,0,0,-1,-1,-1,1,"phIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->puIso)-(long)(p)),102,0,0,-1,-1,-1,1,"puIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dz)-(long)(p)),102,0,0,-1,-1,-1,1,"dz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dzErr)-(long)(p)),102,0,0,-1,-1,-1,1,"dzErr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dxy)-(long)(p)),102,0,0,-1,-1,-1,1,"dxy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dxyErr)-(long)(p)),102,0,0,-1,-1,-1,1,"dxyErr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genPdgId)-(long)(p)),105,0,0,-1,-1,-1,1,"genPdgId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genPt)-(long)(p)),102,0,0,-1,-1,-1,1,"genPt=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"theMuonBits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyRootDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TauObj */
static void G__setup_memvarTauObj(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MyRootDictLN_TauObj));
   { TauObj *p; p=(TauObj*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->nAllTaus)-(long)(p)),104,0,0,-1,-1,-1,1,"nAllTaus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chIso)-(long)(p)),102,0,0,-1,-1,-1,1,"chIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phIso)-(long)(p)),102,0,0,-1,-1,-1,1,"phIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->puIso)-(long)(p)),102,0,0,-1,-1,-1,1,"puIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iso)-(long)(p)),102,0,0,-1,-1,-1,1,"iso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dzPV)-(long)(p)),102,0,0,-1,-1,-1,1,"dzPV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dzTau)-(long)(p)),102,0,0,-1,-1,-1,1,"dzTau=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dzTauErr)-(long)(p)),102,0,0,-1,-1,-1,1,"dzTauErr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dxyTau)-(long)(p)),102,0,0,-1,-1,-1,1,"dxyTau=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dxyTauErr)-(long)(p)),102,0,0,-1,-1,-1,1,"dxyTauErr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dxyTauSig)-(long)(p)),102,0,0,-1,-1,-1,1,"dxyTauSig=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dzTrk)-(long)(p)),102,0,0,-1,-1,-1,1,"dzTrk=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dzTrkErr)-(long)(p)),102,0,0,-1,-1,-1,1,"dzTrkErr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dxyTrk)-(long)(p)),102,0,0,-1,-1,-1,1,"dxyTrk=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dxyTrkErr)-(long)(p)),102,0,0,-1,-1,-1,1,"dxyTrkErr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hasKft)-(long)(p)),105,0,0,-1,-1,-1,1,"hasKft=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hasSecVtx)-(long)(p)),103,0,0,-1,-1,-1,1,"hasSecVtx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->flightLength)-(long)(p)),102,0,0,-1,-1,-1,1,"flightLength=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->flightLengthError)-(long)(p)),102,0,0,-1,-1,-1,1,"flightLengthError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->flightLengthSig)-(long)(p)),102,0,0,-1,-1,-1,1,"flightLengthSig=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genPdgId)-(long)(p)),105,0,0,-1,-1,-1,1,"genPdgId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nGenPart)-(long)(p)),104,0,0,-1,-1,-1,1,"nGenPart=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->leadGenPt)-(long)(p)),102,0,0,-1,-1,-1,1,"leadGenPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genTauJetPt)-(long)(p)),102,0,0,-1,-1,-1,1,"genTauJetPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->decMode)-(long)(p)),105,0,0,-1,-1,-1,1,"decMode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genDecMode)-(long)(p)),105,0,0,-1,-1,-1,1,"genDecMode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->visMass)-(long)(p)),102,0,0,-1,-1,-1,1,"visMass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genVisMass)-(long)(p)),102,0,0,-1,-1,-1,1,"genVisMass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tauIso)-(long)(p)),105,0,0,-1,-1,-1,1,"tauIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->antiE)-(long)(p)),105,0,0,-1,-1,-1,1,"antiE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->antiMu)-(long)(p)),105,0,0,-1,-1,-1,1,"antiMu=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyRootDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<ParticleObj,allocator<ParticleObj> > */
static void G__setup_memvarvectorlEParticleObjcOallocatorlEParticleObjgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgR));
   { vector<ParticleObj,allocator<ParticleObj> > *p; p=(vector<ParticleObj,allocator<ParticleObj> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<ParticleObj,allocator<ParticleObj> >::iterator */
static void G__setup_memvarvectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator));
   { vector<ParticleObj,allocator<ParticleObj> >::iterator *p; p=(vector<ParticleObj,allocator<ParticleObj> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MuonObj,allocator<MuonObj> > */
static void G__setup_memvarvectorlEMuonObjcOallocatorlEMuonObjgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgR));
   { vector<MuonObj,allocator<MuonObj> > *p; p=(vector<MuonObj,allocator<MuonObj> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MuonObj,allocator<MuonObj> >::iterator */
static void G__setup_memvarvectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator));
   { vector<MuonObj,allocator<MuonObj> >::iterator *p; p=(vector<MuonObj,allocator<MuonObj> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<TauObj,allocator<TauObj> > */
static void G__setup_memvarvectorlETauObjcOallocatorlETauObjgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgR));
   { vector<TauObj,allocator<TauObj> > *p; p=(vector<TauObj,allocator<TauObj> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<TauObj,allocator<TauObj> >::iterator */
static void G__setup_memvarvectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator));
   { vector<TauObj,allocator<TauObj> >::iterator *p; p=(vector<TauObj,allocator<TauObj> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<DiTauObj,allocator<DiTauObj> > */
static void G__setup_memvarvectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR));
   { vector<DiTauObj,allocator<DiTauObj> > *p; p=(vector<DiTauObj,allocator<DiTauObj> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<DiTauObj,allocator<DiTauObj> >::iterator */
static void G__setup_memvarvectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator));
   { vector<DiTauObj,allocator<DiTauObj> >::iterator *p; p=(vector<DiTauObj,allocator<DiTauObj> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMyRootDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncParticleObj(void) {
   /* ParticleObj */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj));
   G__memfunc_setup("ParticleObj",1103,G__MyRootDict_168_0_1, 105, G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj), -1, 0, 5, 1, 1, 0, 
"f - - 0 '0.' pt f - - 0 '0.' eta "
"f - - 0 '0.' phi f - - 0 '0.' mass "
"i - - 0 '0' charge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setKine",723,G__MyRootDict_168_0_2, 121, -1, -1, 0, 5, 1, 1, 0, 
"f - - 0 - pt f - - 0 - eta "
"f - - 0 - phi f - - 0 - mass "
"i - - 0 - charge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pt",228,G__MyRootDict_168_0_3, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eta",314,G__MyRootDict_168_0_4, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phi",321,G__MyRootDict_168_0_5, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mass",436,G__MyRootDict_168_0_6, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("charge",618,G__MyRootDict_168_0_7, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MyRootDict_168_0_8, 85, G__get_linked_tagnum(&G__MyRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ParticleObj::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MyRootDict_168_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ParticleObj::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MyRootDict_168_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ParticleObj::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MyRootDict_168_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ParticleObj::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MyRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MyRootDict_168_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MyRootDict_168_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ParticleObj::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MyRootDict_168_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ParticleObj::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MyRootDict_168_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ParticleObj::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MyRootDict_168_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ParticleObj::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ParticleObj", 1103, G__MyRootDict_168_0_20, (int) ('i'), G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj), -1, 0, 1, 1, 1, 0, "u 'ParticleObj' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ParticleObj", 1229, G__MyRootDict_168_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MyRootDict_168_0_22, (int) ('u'), G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj), -1, 1, 1, 1, 1, 0, "u 'ParticleObj' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDiTauObj(void) {
   /* DiTauObj */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj));
   G__memfunc_setup("DiTauObj",754,G__MyRootDict_169_0_1, 105, G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj), -1, 0, 5, 1, 1, 0, 
"f - - 0 '0.' pt f - - 0 '0.' eta "
"f - - 0 '0.' phi f - - 0 '0.' mass "
"i - - 0 '0' charge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MyRootDict_169_0_2, 85, G__get_linked_tagnum(&G__MyRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&DiTauObj::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MyRootDict_169_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DiTauObj::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MyRootDict_169_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&DiTauObj::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MyRootDict_169_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&DiTauObj::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MyRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MyRootDict_169_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MyRootDict_169_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DiTauObj::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MyRootDict_169_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DiTauObj::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MyRootDict_169_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DiTauObj::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MyRootDict_169_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DiTauObj::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("DiTauObj", 754, G__MyRootDict_169_0_14, (int) ('i'), G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj), -1, 0, 1, 1, 1, 0, "u 'DiTauObj' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DiTauObj", 880, G__MyRootDict_169_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MyRootDict_169_0_16, (int) ('u'), G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj), -1, 1, 1, 1, 1, 0, "u 'DiTauObj' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMuonObj(void) {
   /* MuonObj */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MyRootDictLN_MuonObj));
   G__memfunc_setup("MuonObj",698,G__MyRootDict_170_0_1, 105, G__get_linked_tagnum(&G__MyRootDictLN_MuonObj), -1, 0, 5, 1, 1, 0, 
"f - - 0 '0.' pt f - - 0 '0.' eta "
"f - - 0 '0.' phi f - - 0 '0.' mass "
"i - - 0 '0' charge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setBits",734,G__MyRootDict_170_0_2, 121, -1, -1, 0, 9, 1, 1, 0, 
"g - - 0 - isGlobal g - - 0 - isTracker "
"g - - 0 - isOuter g - - 0 - isCalo "
"g - - 0 - isMatched g - - 0 - isPF "
"g - - 0 - isLoose g - - 0 - isTight "
"g - - 0 - isGood", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGood",613,G__MyRootDict_170_0_3, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isLoose",734,G__MyRootDict_170_0_4, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isTight",732,G__MyRootDict_170_0_5, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isPF",370,G__MyRootDict_170_0_6, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGlobal",813,G__MyRootDict_170_0_7, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isTracker",936,G__MyRootDict_170_0_8, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isOuter",747,G__MyRootDict_170_0_9, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isCalo",603,G__MyRootDict_170_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isMatched",914,G__MyRootDict_170_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MyRootDict_170_0_12, 85, G__get_linked_tagnum(&G__MyRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MuonObj::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MyRootDict_170_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MuonObj::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MyRootDict_170_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MuonObj::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MyRootDict_170_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MuonObj::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MyRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MyRootDict_170_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MyRootDict_170_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MuonObj::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MyRootDict_170_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MuonObj::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MyRootDict_170_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MuonObj::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MyRootDict_170_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MuonObj::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MuonObj", 698, G__MyRootDict_170_0_24, (int) ('i'), G__get_linked_tagnum(&G__MyRootDictLN_MuonObj), -1, 0, 1, 1, 1, 0, "u 'MuonObj' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MuonObj", 824, G__MyRootDict_170_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MyRootDict_170_0_26, (int) ('u'), G__get_linked_tagnum(&G__MyRootDictLN_MuonObj), -1, 1, 1, 1, 1, 0, "u 'MuonObj' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTauObj(void) {
   /* TauObj */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MyRootDictLN_TauObj));
   G__memfunc_setup("TauObj",581,G__MyRootDict_171_0_1, 105, G__get_linked_tagnum(&G__MyRootDictLN_TauObj), -1, 0, 5, 1, 1, 0, 
"f - - 0 '0.' pt f - - 0 '0.' eta "
"f - - 0 '0.' phi f - - 0 '0.' mass "
"i - - 0 '0' charge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MyRootDict_171_0_2, 85, G__get_linked_tagnum(&G__MyRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TauObj::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MyRootDict_171_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TauObj::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MyRootDict_171_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TauObj::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MyRootDict_171_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TauObj::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MyRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MyRootDict_171_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MyRootDict_171_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TauObj::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MyRootDict_171_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TauObj::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MyRootDict_171_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TauObj::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MyRootDict_171_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TauObj::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TauObj", 581, G__MyRootDict_171_0_14, (int) ('i'), G__get_linked_tagnum(&G__MyRootDictLN_TauObj), -1, 0, 1, 1, 1, 0, "u 'TauObj' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TauObj", 707, G__MyRootDict_171_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MyRootDict_171_0_16, (int) ('u'), G__get_linked_tagnum(&G__MyRootDictLN_TauObj), -1, 1, 1, 1, 1, 0, "u 'TauObj' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEParticleObjcOallocatorlEParticleObjgRsPgR(void) {
   /* vector<ParticleObj,allocator<ParticleObj> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgR));
   G__memfunc_setup("at",213,G__MyRootDict_173_0_1, 117, G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj), G__defined_typename("vector<ParticleObj,allocator<ParticleObj> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<ParticleObj,allocator<ParticleObj> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__MyRootDict_173_0_2, 117, G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj), G__defined_typename("vector<ParticleObj,allocator<ParticleObj> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<ParticleObj,allocator<ParticleObj> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__MyRootDict_173_0_3, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__MyRootDict_173_0_4, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__MyRootDict_173_0_5, 117, G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiteratorgR), G__defined_typename("vector<ParticleObj,allocator<ParticleObj> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__MyRootDict_173_0_6, 117, G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiteratorgR), G__defined_typename("vector<ParticleObj,allocator<ParticleObj> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__MyRootDict_173_0_7, 107, -1, G__defined_typename("vector<ParticleObj,allocator<ParticleObj> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__MyRootDict_173_0_8, 107, -1, G__defined_typename("vector<ParticleObj,allocator<ParticleObj> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__MyRootDict_173_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<ParticleObj,allocator<ParticleObj> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__MyRootDict_173_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<ParticleObj,allocator<ParticleObj> >::size_type' 0 - sz u 'ParticleObj' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__MyRootDict_173_0_11, 107, -1, G__defined_typename("vector<ParticleObj,allocator<ParticleObj> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__MyRootDict_173_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MyRootDict_173_0_13, 117, G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj), G__defined_typename("vector<ParticleObj,allocator<ParticleObj> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<ParticleObj,allocator<ParticleObj> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MyRootDict_173_0_14, 117, G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj), G__defined_typename("vector<ParticleObj,allocator<ParticleObj> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<ParticleObj,allocator<ParticleObj> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<ParticleObj,allocator<ParticleObj> >",4146,G__MyRootDict_173_0_15, 105, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<ParticleObj,allocator<ParticleObj> >",4146,G__MyRootDict_173_0_16, 105, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<ParticleObj,allocator<ParticleObj> >::size_type' 0 - n u 'ParticleObj' - 11 'ParticleObj()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<ParticleObj,allocator<ParticleObj> >",4146,G__MyRootDict_173_0_17, 105, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<ParticleObj,allocator<ParticleObj> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<ParticleObj,allocator<ParticleObj> >",4146,G__MyRootDict_173_0_18, 105, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<ParticleObj,allocator<ParticleObj> >::iterator' 'vector<ParticleObj,allocator<ParticleObj> >::const_iterator' 10 - first u 'vector<ParticleObj,allocator<ParticleObj> >::iterator' 'vector<ParticleObj,allocator<ParticleObj> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__MyRootDict_173_0_19, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<ParticleObj,allocator<ParticleObj> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__MyRootDict_173_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<ParticleObj,allocator<ParticleObj> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__MyRootDict_173_0_21, 117, G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__MyRootDict_173_0_22, 117, G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__MyRootDict_173_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'ParticleObj' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__MyRootDict_173_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<ParticleObj,allocator<ParticleObj> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__MyRootDict_173_0_25, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<ParticleObj,allocator<ParticleObj> >::iterator' - 0 - position u 'ParticleObj' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__MyRootDict_173_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<ParticleObj,allocator<ParticleObj> >::iterator' - 0 - position u 'vector<ParticleObj,allocator<ParticleObj> >::iterator' 'vector<ParticleObj,allocator<ParticleObj> >::const_iterator' 10 - first "
"u 'vector<ParticleObj,allocator<ParticleObj> >::iterator' 'vector<ParticleObj,allocator<ParticleObj> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__MyRootDict_173_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<ParticleObj,allocator<ParticleObj> >::iterator' - 0 - position k - 'vector<ParticleObj,allocator<ParticleObj> >::size_type' 0 - n "
"u 'ParticleObj' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__MyRootDict_173_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__MyRootDict_173_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<ParticleObj,allocator<ParticleObj> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__MyRootDict_173_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<ParticleObj,allocator<ParticleObj> >::iterator' - 0 - first u 'vector<ParticleObj,allocator<ParticleObj> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MyRootDict_173_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<ParticleObj,allocator<ParticleObj> >", 4272, G__MyRootDict_173_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator(void) {
   /* vector<ParticleObj,allocator<ParticleObj> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__MyRootDict_174_0_1, 105, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__MyRootDict_174_0_2, 105, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator), -1, 0, 1, 5, 1, 0, "U 'ParticleObj' 'vector<ParticleObj,allocator<ParticleObj> >::iterator::pointer' 11 - __i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__MyRootDict_174_0_3, 117, G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj), G__defined_typename("vector<ParticleObj,allocator<ParticleObj> >::iterator::reference"), 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__MyRootDict_174_0_4, 85, G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj), G__defined_typename("vector<ParticleObj,allocator<ParticleObj> >::iterator::pointer"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__MyRootDict_174_0_5, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__MyRootDict_174_0_6, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__MyRootDict_174_0_7, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__MyRootDict_174_0_8, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MyRootDict_174_0_9, 117, G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj), G__defined_typename("vector<ParticleObj,allocator<ParticleObj> >::iterator::reference"), 1, 1, 1, 1, 8, "l - 'vector<ParticleObj,allocator<ParticleObj> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__MyRootDict_174_0_10, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<ParticleObj,allocator<ParticleObj> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__MyRootDict_174_0_11, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<ParticleObj,allocator<ParticleObj> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__MyRootDict_174_0_12, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<ParticleObj,allocator<ParticleObj> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__MyRootDict_174_0_13, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<ParticleObj,allocator<ParticleObj> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("base",411,G__MyRootDict_174_0_14, 85, G__get_linked_tagnum(&G__MyRootDictLN_ParticleObj), G__defined_typename("vector<ParticleObj,allocator<ParticleObj> >::iterator::pointer"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__MyRootDict_174_0_15, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<ParticleObj,allocator<ParticleObj> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("iterator", 874, G__MyRootDict_174_0_16, (int) ('i'), G__get_linked_tagnum(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<ParticleObj,allocator<ParticleObj> >::iterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__MyRootDict_174_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMuonObjcOallocatorlEMuonObjgRsPgR(void) {
   /* vector<MuonObj,allocator<MuonObj> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgR));
   G__memfunc_setup("at",213,G__MyRootDict_177_0_1, 117, G__get_linked_tagnum(&G__MyRootDictLN_MuonObj), G__defined_typename("vector<MuonObj,allocator<MuonObj> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MuonObj,allocator<MuonObj> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__MyRootDict_177_0_2, 117, G__get_linked_tagnum(&G__MyRootDictLN_MuonObj), G__defined_typename("vector<MuonObj,allocator<MuonObj> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MuonObj,allocator<MuonObj> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__MyRootDict_177_0_3, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__MyRootDict_177_0_4, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__MyRootDict_177_0_5, 117, G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiteratorgR), G__defined_typename("vector<MuonObj,allocator<MuonObj> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__MyRootDict_177_0_6, 117, G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiteratorgR), G__defined_typename("vector<MuonObj,allocator<MuonObj> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__MyRootDict_177_0_7, 107, -1, G__defined_typename("vector<MuonObj,allocator<MuonObj> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__MyRootDict_177_0_8, 107, -1, G__defined_typename("vector<MuonObj,allocator<MuonObj> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__MyRootDict_177_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MuonObj,allocator<MuonObj> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__MyRootDict_177_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<MuonObj,allocator<MuonObj> >::size_type' 0 - sz u 'MuonObj' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__MyRootDict_177_0_11, 107, -1, G__defined_typename("vector<MuonObj,allocator<MuonObj> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__MyRootDict_177_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MyRootDict_177_0_13, 117, G__get_linked_tagnum(&G__MyRootDictLN_MuonObj), G__defined_typename("vector<MuonObj,allocator<MuonObj> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<MuonObj,allocator<MuonObj> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MyRootDict_177_0_14, 117, G__get_linked_tagnum(&G__MyRootDictLN_MuonObj), G__defined_typename("vector<MuonObj,allocator<MuonObj> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<MuonObj,allocator<MuonObj> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MuonObj,allocator<MuonObj> >",3336,G__MyRootDict_177_0_15, 105, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MuonObj,allocator<MuonObj> >",3336,G__MyRootDict_177_0_16, 105, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<MuonObj,allocator<MuonObj> >::size_type' 0 - n u 'MuonObj' - 11 'MuonObj()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MuonObj,allocator<MuonObj> >",3336,G__MyRootDict_177_0_17, 105, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MuonObj,allocator<MuonObj> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MuonObj,allocator<MuonObj> >",3336,G__MyRootDict_177_0_18, 105, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MuonObj,allocator<MuonObj> >::iterator' 'vector<MuonObj,allocator<MuonObj> >::const_iterator' 10 - first u 'vector<MuonObj,allocator<MuonObj> >::iterator' 'vector<MuonObj,allocator<MuonObj> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__MyRootDict_177_0_19, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MuonObj,allocator<MuonObj> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__MyRootDict_177_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<MuonObj,allocator<MuonObj> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__MyRootDict_177_0_21, 117, G__get_linked_tagnum(&G__MyRootDictLN_MuonObj), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__MyRootDict_177_0_22, 117, G__get_linked_tagnum(&G__MyRootDictLN_MuonObj), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__MyRootDict_177_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MuonObj' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__MyRootDict_177_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MuonObj,allocator<MuonObj> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__MyRootDict_177_0_25, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MuonObj,allocator<MuonObj> >::iterator' - 0 - position u 'MuonObj' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__MyRootDict_177_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MuonObj,allocator<MuonObj> >::iterator' - 0 - position u 'vector<MuonObj,allocator<MuonObj> >::iterator' 'vector<MuonObj,allocator<MuonObj> >::const_iterator' 10 - first "
"u 'vector<MuonObj,allocator<MuonObj> >::iterator' 'vector<MuonObj,allocator<MuonObj> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__MyRootDict_177_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MuonObj,allocator<MuonObj> >::iterator' - 0 - position k - 'vector<MuonObj,allocator<MuonObj> >::size_type' 0 - n "
"u 'MuonObj' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__MyRootDict_177_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__MyRootDict_177_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MuonObj,allocator<MuonObj> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__MyRootDict_177_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MuonObj,allocator<MuonObj> >::iterator' - 0 - first u 'vector<MuonObj,allocator<MuonObj> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MyRootDict_177_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MuonObj,allocator<MuonObj> >", 3462, G__MyRootDict_177_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator(void) {
   /* vector<MuonObj,allocator<MuonObj> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__MyRootDict_178_0_1, 105, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__MyRootDict_178_0_2, 105, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator), -1, 0, 1, 5, 1, 0, "U 'MuonObj' 'vector<MuonObj,allocator<MuonObj> >::iterator::pointer' 11 - __i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__MyRootDict_178_0_3, 117, G__get_linked_tagnum(&G__MyRootDictLN_MuonObj), G__defined_typename("vector<MuonObj,allocator<MuonObj> >::iterator::reference"), 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__MyRootDict_178_0_4, 85, G__get_linked_tagnum(&G__MyRootDictLN_MuonObj), G__defined_typename("vector<MuonObj,allocator<MuonObj> >::iterator::pointer"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__MyRootDict_178_0_5, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__MyRootDict_178_0_6, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__MyRootDict_178_0_7, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__MyRootDict_178_0_8, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MyRootDict_178_0_9, 117, G__get_linked_tagnum(&G__MyRootDictLN_MuonObj), G__defined_typename("vector<MuonObj,allocator<MuonObj> >::iterator::reference"), 1, 1, 1, 1, 8, "l - 'vector<MuonObj,allocator<MuonObj> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__MyRootDict_178_0_10, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<MuonObj,allocator<MuonObj> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__MyRootDict_178_0_11, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<MuonObj,allocator<MuonObj> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__MyRootDict_178_0_12, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<MuonObj,allocator<MuonObj> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__MyRootDict_178_0_13, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<MuonObj,allocator<MuonObj> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("base",411,G__MyRootDict_178_0_14, 85, G__get_linked_tagnum(&G__MyRootDictLN_MuonObj), G__defined_typename("vector<MuonObj,allocator<MuonObj> >::iterator::pointer"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__MyRootDict_178_0_15, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<MuonObj,allocator<MuonObj> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("iterator", 874, G__MyRootDict_178_0_16, (int) ('i'), G__get_linked_tagnum(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<MuonObj,allocator<MuonObj> >::iterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__MyRootDict_178_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlETauObjcOallocatorlETauObjgRsPgR(void) {
   /* vector<TauObj,allocator<TauObj> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgR));
   G__memfunc_setup("at",213,G__MyRootDict_181_0_1, 117, G__get_linked_tagnum(&G__MyRootDictLN_TauObj), G__defined_typename("vector<TauObj,allocator<TauObj> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<TauObj,allocator<TauObj> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__MyRootDict_181_0_2, 117, G__get_linked_tagnum(&G__MyRootDictLN_TauObj), G__defined_typename("vector<TauObj,allocator<TauObj> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<TauObj,allocator<TauObj> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__MyRootDict_181_0_3, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__MyRootDict_181_0_4, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__MyRootDict_181_0_5, 117, G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlETauObjcOallocatorlETauObjgRsPgRcLcLiteratorgR), G__defined_typename("vector<TauObj,allocator<TauObj> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__MyRootDict_181_0_6, 117, G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlETauObjcOallocatorlETauObjgRsPgRcLcLiteratorgR), G__defined_typename("vector<TauObj,allocator<TauObj> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__MyRootDict_181_0_7, 107, -1, G__defined_typename("vector<TauObj,allocator<TauObj> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__MyRootDict_181_0_8, 107, -1, G__defined_typename("vector<TauObj,allocator<TauObj> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__MyRootDict_181_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<TauObj,allocator<TauObj> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__MyRootDict_181_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<TauObj,allocator<TauObj> >::size_type' 0 - sz u 'TauObj' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__MyRootDict_181_0_11, 107, -1, G__defined_typename("vector<TauObj,allocator<TauObj> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__MyRootDict_181_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MyRootDict_181_0_13, 117, G__get_linked_tagnum(&G__MyRootDictLN_TauObj), G__defined_typename("vector<TauObj,allocator<TauObj> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<TauObj,allocator<TauObj> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MyRootDict_181_0_14, 117, G__get_linked_tagnum(&G__MyRootDictLN_TauObj), G__defined_typename("vector<TauObj,allocator<TauObj> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<TauObj,allocator<TauObj> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TauObj,allocator<TauObj> >",3102,G__MyRootDict_181_0_15, 105, G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TauObj,allocator<TauObj> >",3102,G__MyRootDict_181_0_16, 105, G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<TauObj,allocator<TauObj> >::size_type' 0 - n u 'TauObj' - 11 'TauObj()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TauObj,allocator<TauObj> >",3102,G__MyRootDict_181_0_17, 105, G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<TauObj,allocator<TauObj> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TauObj,allocator<TauObj> >",3102,G__MyRootDict_181_0_18, 105, G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<TauObj,allocator<TauObj> >::iterator' 'vector<TauObj,allocator<TauObj> >::const_iterator' 10 - first u 'vector<TauObj,allocator<TauObj> >::iterator' 'vector<TauObj,allocator<TauObj> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__MyRootDict_181_0_19, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<TauObj,allocator<TauObj> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__MyRootDict_181_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<TauObj,allocator<TauObj> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__MyRootDict_181_0_21, 117, G__get_linked_tagnum(&G__MyRootDictLN_TauObj), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__MyRootDict_181_0_22, 117, G__get_linked_tagnum(&G__MyRootDictLN_TauObj), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__MyRootDict_181_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TauObj' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__MyRootDict_181_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<TauObj,allocator<TauObj> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__MyRootDict_181_0_25, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<TauObj,allocator<TauObj> >::iterator' - 0 - position u 'TauObj' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__MyRootDict_181_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<TauObj,allocator<TauObj> >::iterator' - 0 - position u 'vector<TauObj,allocator<TauObj> >::iterator' 'vector<TauObj,allocator<TauObj> >::const_iterator' 10 - first "
"u 'vector<TauObj,allocator<TauObj> >::iterator' 'vector<TauObj,allocator<TauObj> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__MyRootDict_181_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<TauObj,allocator<TauObj> >::iterator' - 0 - position k - 'vector<TauObj,allocator<TauObj> >::size_type' 0 - n "
"u 'TauObj' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__MyRootDict_181_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__MyRootDict_181_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<TauObj,allocator<TauObj> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__MyRootDict_181_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<TauObj,allocator<TauObj> >::iterator' - 0 - first u 'vector<TauObj,allocator<TauObj> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MyRootDict_181_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<TauObj,allocator<TauObj> >", 3228, G__MyRootDict_181_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator(void) {
   /* vector<TauObj,allocator<TauObj> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__MyRootDict_182_0_1, 105, G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__MyRootDict_182_0_2, 105, G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator), -1, 0, 1, 5, 1, 0, "U 'TauObj' 'vector<TauObj,allocator<TauObj> >::iterator::pointer' 11 - __i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__MyRootDict_182_0_3, 117, G__get_linked_tagnum(&G__MyRootDictLN_TauObj), G__defined_typename("vector<TauObj,allocator<TauObj> >::iterator::reference"), 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__MyRootDict_182_0_4, 85, G__get_linked_tagnum(&G__MyRootDictLN_TauObj), G__defined_typename("vector<TauObj,allocator<TauObj> >::iterator::pointer"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__MyRootDict_182_0_5, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__MyRootDict_182_0_6, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__MyRootDict_182_0_7, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__MyRootDict_182_0_8, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MyRootDict_182_0_9, 117, G__get_linked_tagnum(&G__MyRootDictLN_TauObj), G__defined_typename("vector<TauObj,allocator<TauObj> >::iterator::reference"), 1, 1, 1, 1, 8, "l - 'vector<TauObj,allocator<TauObj> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__MyRootDict_182_0_10, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<TauObj,allocator<TauObj> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__MyRootDict_182_0_11, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<TauObj,allocator<TauObj> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__MyRootDict_182_0_12, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<TauObj,allocator<TauObj> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__MyRootDict_182_0_13, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<TauObj,allocator<TauObj> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("base",411,G__MyRootDict_182_0_14, 85, G__get_linked_tagnum(&G__MyRootDictLN_TauObj), G__defined_typename("vector<TauObj,allocator<TauObj> >::iterator::pointer"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__MyRootDict_182_0_15, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<TauObj,allocator<TauObj> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("iterator", 874, G__MyRootDict_182_0_16, (int) ('i'), G__get_linked_tagnum(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<TauObj,allocator<TauObj> >::iterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__MyRootDict_182_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR(void) {
   /* vector<DiTauObj,allocator<DiTauObj> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR));
   G__memfunc_setup("at",213,G__MyRootDict_185_0_1, 117, G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj), G__defined_typename("vector<DiTauObj,allocator<DiTauObj> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<DiTauObj,allocator<DiTauObj> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__MyRootDict_185_0_2, 117, G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj), G__defined_typename("vector<DiTauObj,allocator<DiTauObj> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<DiTauObj,allocator<DiTauObj> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__MyRootDict_185_0_3, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__MyRootDict_185_0_4, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__MyRootDict_185_0_5, 117, G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiteratorgR), G__defined_typename("vector<DiTauObj,allocator<DiTauObj> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__MyRootDict_185_0_6, 117, G__get_linked_tagnum(&G__MyRootDictLN_reverse_iteratorlEvectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiteratorgR), G__defined_typename("vector<DiTauObj,allocator<DiTauObj> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__MyRootDict_185_0_7, 107, -1, G__defined_typename("vector<DiTauObj,allocator<DiTauObj> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__MyRootDict_185_0_8, 107, -1, G__defined_typename("vector<DiTauObj,allocator<DiTauObj> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__MyRootDict_185_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<DiTauObj,allocator<DiTauObj> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__MyRootDict_185_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<DiTauObj,allocator<DiTauObj> >::size_type' 0 - sz u 'DiTauObj' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__MyRootDict_185_0_11, 107, -1, G__defined_typename("vector<DiTauObj,allocator<DiTauObj> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__MyRootDict_185_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MyRootDict_185_0_13, 117, G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj), G__defined_typename("vector<DiTauObj,allocator<DiTauObj> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<DiTauObj,allocator<DiTauObj> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MyRootDict_185_0_14, 117, G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj), G__defined_typename("vector<DiTauObj,allocator<DiTauObj> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<DiTauObj,allocator<DiTauObj> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<DiTauObj,allocator<DiTauObj> >",3448,G__MyRootDict_185_0_15, 105, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<DiTauObj,allocator<DiTauObj> >",3448,G__MyRootDict_185_0_16, 105, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<DiTauObj,allocator<DiTauObj> >::size_type' 0 - n u 'DiTauObj' - 11 'DiTauObj()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<DiTauObj,allocator<DiTauObj> >",3448,G__MyRootDict_185_0_17, 105, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<DiTauObj,allocator<DiTauObj> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<DiTauObj,allocator<DiTauObj> >",3448,G__MyRootDict_185_0_18, 105, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<DiTauObj,allocator<DiTauObj> >::iterator' 'vector<DiTauObj,allocator<DiTauObj> >::const_iterator' 10 - first u 'vector<DiTauObj,allocator<DiTauObj> >::iterator' 'vector<DiTauObj,allocator<DiTauObj> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__MyRootDict_185_0_19, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<DiTauObj,allocator<DiTauObj> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__MyRootDict_185_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<DiTauObj,allocator<DiTauObj> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__MyRootDict_185_0_21, 117, G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__MyRootDict_185_0_22, 117, G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__MyRootDict_185_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'DiTauObj' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__MyRootDict_185_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<DiTauObj,allocator<DiTauObj> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__MyRootDict_185_0_25, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<DiTauObj,allocator<DiTauObj> >::iterator' - 0 - position u 'DiTauObj' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__MyRootDict_185_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<DiTauObj,allocator<DiTauObj> >::iterator' - 0 - position u 'vector<DiTauObj,allocator<DiTauObj> >::iterator' 'vector<DiTauObj,allocator<DiTauObj> >::const_iterator' 10 - first "
"u 'vector<DiTauObj,allocator<DiTauObj> >::iterator' 'vector<DiTauObj,allocator<DiTauObj> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__MyRootDict_185_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<DiTauObj,allocator<DiTauObj> >::iterator' - 0 - position k - 'vector<DiTauObj,allocator<DiTauObj> >::size_type' 0 - n "
"u 'DiTauObj' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__MyRootDict_185_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__MyRootDict_185_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<DiTauObj,allocator<DiTauObj> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__MyRootDict_185_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<DiTauObj,allocator<DiTauObj> >::iterator' - 0 - first u 'vector<DiTauObj,allocator<DiTauObj> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MyRootDict_185_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<DiTauObj,allocator<DiTauObj> >", 3574, G__MyRootDict_185_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator(void) {
   /* vector<DiTauObj,allocator<DiTauObj> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__MyRootDict_186_0_1, 105, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__MyRootDict_186_0_2, 105, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator), -1, 0, 1, 5, 1, 0, "U 'DiTauObj' 'vector<DiTauObj,allocator<DiTauObj> >::iterator::pointer' 11 - __i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__MyRootDict_186_0_3, 117, G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj), G__defined_typename("vector<DiTauObj,allocator<DiTauObj> >::iterator::reference"), 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__MyRootDict_186_0_4, 85, G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj), G__defined_typename("vector<DiTauObj,allocator<DiTauObj> >::iterator::pointer"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__MyRootDict_186_0_5, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__MyRootDict_186_0_6, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__MyRootDict_186_0_7, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__MyRootDict_186_0_8, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MyRootDict_186_0_9, 117, G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj), G__defined_typename("vector<DiTauObj,allocator<DiTauObj> >::iterator::reference"), 1, 1, 1, 1, 8, "l - 'vector<DiTauObj,allocator<DiTauObj> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__MyRootDict_186_0_10, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<DiTauObj,allocator<DiTauObj> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__MyRootDict_186_0_11, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<DiTauObj,allocator<DiTauObj> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__MyRootDict_186_0_12, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<DiTauObj,allocator<DiTauObj> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__MyRootDict_186_0_13, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<DiTauObj,allocator<DiTauObj> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("base",411,G__MyRootDict_186_0_14, 85, G__get_linked_tagnum(&G__MyRootDictLN_DiTauObj), G__defined_typename("vector<DiTauObj,allocator<DiTauObj> >::iterator::pointer"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__MyRootDict_186_0_15, 117, G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<DiTauObj,allocator<DiTauObj> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("iterator", 874, G__MyRootDict_186_0_16, (int) ('i'), G__get_linked_tagnum(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<DiTauObj,allocator<DiTauObj> >::iterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__MyRootDict_186_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMyRootDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMyRootDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMyRootDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__MyRootDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__MyRootDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__MyRootDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__MyRootDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__MyRootDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__MyRootDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MyRootDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__MyRootDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MyRootDictLN_ParticleObj = { "ParticleObj" , 99 , -1 };
G__linked_taginfo G__MyRootDictLN_DiTauObj = { "DiTauObj" , 99 , -1 };
G__linked_taginfo G__MyRootDictLN_MuonObj = { "MuonObj" , 99 , -1 };
G__linked_taginfo G__MyRootDictLN_TauObj = { "TauObj" , 99 , -1 };
G__linked_taginfo G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgR = { "vector<ParticleObj,allocator<ParticleObj> >" , 99 , -1 };
G__linked_taginfo G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator = { "vector<ParticleObj,allocator<ParticleObj> >::iterator" , 99 , -1 };
G__linked_taginfo G__MyRootDictLN_reverse_iteratorlEvectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ParticleObj,allocator<ParticleObj> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgR = { "vector<MuonObj,allocator<MuonObj> >" , 99 , -1 };
G__linked_taginfo G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator = { "vector<MuonObj,allocator<MuonObj> >::iterator" , 99 , -1 };
G__linked_taginfo G__MyRootDictLN_reverse_iteratorlEvectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MuonObj,allocator<MuonObj> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgR = { "vector<TauObj,allocator<TauObj> >" , 99 , -1 };
G__linked_taginfo G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator = { "vector<TauObj,allocator<TauObj> >::iterator" , 99 , -1 };
G__linked_taginfo G__MyRootDictLN_reverse_iteratorlEvectorlETauObjcOallocatorlETauObjgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TauObj,allocator<TauObj> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR = { "vector<DiTauObj,allocator<DiTauObj> >" , 99 , -1 };
G__linked_taginfo G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator = { "vector<DiTauObj,allocator<DiTauObj> >::iterator" , 99 , -1 };
G__linked_taginfo G__MyRootDictLN_reverse_iteratorlEvectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<DiTauObj,allocator<DiTauObj> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMyRootDict() {
  G__MyRootDictLN_TClass.tagnum = -1 ;
  G__MyRootDictLN_TBuffer.tagnum = -1 ;
  G__MyRootDictLN_TMemberInspector.tagnum = -1 ;
  G__MyRootDictLN_TObject.tagnum = -1 ;
  G__MyRootDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__MyRootDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MyRootDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__MyRootDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MyRootDictLN_ParticleObj.tagnum = -1 ;
  G__MyRootDictLN_DiTauObj.tagnum = -1 ;
  G__MyRootDictLN_MuonObj.tagnum = -1 ;
  G__MyRootDictLN_TauObj.tagnum = -1 ;
  G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgR.tagnum = -1 ;
  G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator.tagnum = -1 ;
  G__MyRootDictLN_reverse_iteratorlEvectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgR.tagnum = -1 ;
  G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator.tagnum = -1 ;
  G__MyRootDictLN_reverse_iteratorlEvectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgR.tagnum = -1 ;
  G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator.tagnum = -1 ;
  G__MyRootDictLN_reverse_iteratorlEvectorlETauObjcOallocatorlETauObjgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR.tagnum = -1 ;
  G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator.tagnum = -1 ;
  G__MyRootDictLN_reverse_iteratorlEvectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMyRootDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__MyRootDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__MyRootDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__MyRootDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__MyRootDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__MyRootDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__MyRootDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MyRootDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__MyRootDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MyRootDictLN_ParticleObj),sizeof(ParticleObj),-1,29952,(char*)NULL,G__setup_memvarParticleObj,G__setup_memfuncParticleObj);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MyRootDictLN_DiTauObj),sizeof(DiTauObj),-1,29952,(char*)NULL,G__setup_memvarDiTauObj,G__setup_memfuncDiTauObj);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MyRootDictLN_MuonObj),sizeof(MuonObj),-1,29952,(char*)NULL,G__setup_memvarMuonObj,G__setup_memfuncMuonObj);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MyRootDictLN_TauObj),sizeof(TauObj),-1,29952,(char*)NULL,G__setup_memvarTauObj,G__setup_memfuncTauObj);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgR),sizeof(vector<ParticleObj,allocator<ParticleObj> >),-1,36608,(char*)NULL,G__setup_memvarvectorlEParticleObjcOallocatorlEParticleObjgRsPgR,G__setup_memfuncvectorlEParticleObjcOallocatorlEParticleObjgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MyRootDictLN_vectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator),sizeof(vector<ParticleObj,allocator<ParticleObj> >::iterator),-1,35072,(char*)NULL,G__setup_memvarvectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator,G__setup_memfuncvectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__MyRootDictLN_reverse_iteratorlEvectorlEParticleObjcOallocatorlEParticleObjgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgR),sizeof(vector<MuonObj,allocator<MuonObj> >),-1,36608,(char*)NULL,G__setup_memvarvectorlEMuonObjcOallocatorlEMuonObjgRsPgR,G__setup_memfuncvectorlEMuonObjcOallocatorlEMuonObjgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MyRootDictLN_vectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator),sizeof(vector<MuonObj,allocator<MuonObj> >::iterator),-1,35072,(char*)NULL,G__setup_memvarvectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator,G__setup_memfuncvectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__MyRootDictLN_reverse_iteratorlEvectorlEMuonObjcOallocatorlEMuonObjgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgR),sizeof(vector<TauObj,allocator<TauObj> >),-1,36608,(char*)NULL,G__setup_memvarvectorlETauObjcOallocatorlETauObjgRsPgR,G__setup_memfuncvectorlETauObjcOallocatorlETauObjgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MyRootDictLN_vectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator),sizeof(vector<TauObj,allocator<TauObj> >::iterator),-1,35072,(char*)NULL,G__setup_memvarvectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator,G__setup_memfuncvectorlETauObjcOallocatorlETauObjgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__MyRootDictLN_reverse_iteratorlEvectorlETauObjcOallocatorlETauObjgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR),sizeof(vector<DiTauObj,allocator<DiTauObj> >),-1,36608,(char*)NULL,G__setup_memvarvectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR,G__setup_memfuncvectorlEDiTauObjcOallocatorlEDiTauObjgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MyRootDictLN_vectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator),sizeof(vector<DiTauObj,allocator<DiTauObj> >::iterator),-1,35072,(char*)NULL,G__setup_memvarvectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator,G__setup_memfuncvectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__MyRootDictLN_reverse_iteratorlEvectorlEDiTauObjcOallocatorlEDiTauObjgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupMyRootDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupMyRootDict()");
  G__set_cpp_environmentMyRootDict();
  G__cpp_setup_tagtableMyRootDict();

  G__cpp_setup_inheritanceMyRootDict();

  G__cpp_setup_typetableMyRootDict();

  G__cpp_setup_memvarMyRootDict();

  G__cpp_setup_memfuncMyRootDict();
  G__cpp_setup_globalMyRootDict();
  G__cpp_setup_funcMyRootDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMyRootDict();
  return;
}
class G__cpp_setup_initMyRootDict {
  public:
    G__cpp_setup_initMyRootDict() { G__add_setup_func("MyRootDict",(G__incsetup)(&G__cpp_setupMyRootDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMyRootDict() { G__remove_setup_func("MyRootDict"); }
};
G__cpp_setup_initMyRootDict G__cpp_setup_initializerMyRootDict;

